{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        'sans': ['Inter', 'system-ui', 'sans-serif'],\n        'serif': ['Playfair Display', 'serif'],\n        'display': ['Playfair Display', 'serif'],\n        'poppins': ['Poppins', 'sans-serif'],\n        'crimson': ['Crimson Text', 'serif'],\n        'lora': ['Lora', 'serif'],\n        'inter': ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3137},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { config } from \"dotenv\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Load environment variables\nconfig();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1995},"server/json-storage.ts":{"content":"import { promises as fs } from 'fs';\nimport { join } from 'path';\nimport type { \n  Category, \n  Product, \n  CartItem, \n  Order,\n  InsertCategory, \n  InsertProduct, \n  InsertCartItem, \n  InsertOrder,\n  ProductWithCategory,\n  CartItemWithProduct,\n  Setting,\n  InsertSetting,\n  Review,\n  InsertReview\n} from \"@shared/schema\";\nimport type { User, InsertUser } from \"@shared/auth-schema\";\nimport bcrypt from 'bcrypt';\nimport { IStorage } from './storage';\n\ninterface DatabaseData {\n  categories: Category[];\n  products: Product[];\n  cartItems: CartItem[];\n  orders: Order[];\n  settings: Setting[];\n  users: User[];\n  sessions: { sessionId: string; userId: number; expiresAt: string }[];\n  reviews: Review[];\n  counters: {\n    categoryId: number;\n    productId: number;\n    cartItemId: number;\n    orderId: number;\n    userId: number;\n    reviewId: number;\n  };\n}\n\nexport class JsonStorage implements IStorage {\n  private readonly dataDir = './data';\n  private readonly dbFile = join(this.dataDir, 'database.json');\n  private data: DatabaseData;\n\n  constructor() {\n    this.data = {\n      categories: [],\n      products: [],\n      cartItems: [],\n      orders: [],\n      settings: [],\n      users: [],\n      sessions: [],\n      reviews: [],\n      counters: {\n        categoryId: 1,\n        productId: 1,\n        cartItemId: 1,\n        orderId: 1,\n        userId: 1,\n        reviewId: 1\n      }\n    };\n    this.ensureDataDirectory();\n    this.loadData();\n  }\n\n  private async ensureDataDirectory() {\n    try {\n      await fs.mkdir(this.dataDir, { recursive: true });\n      await fs.mkdir(join(this.dataDir, 'images'), { recursive: true });\n    } catch (error) {\n      console.error('Error creating data directory:', error);\n    }\n  }\n\n  private async loadData() {\n    try {\n      const fileExists = await fs.access(this.dbFile).then(() => true).catch(() => false);\n\n      if (fileExists) {\n        const fileContent = await fs.readFile(this.dbFile, 'utf-8');\n        const loadedData = JSON.parse(fileContent);\n\n        // Ensure all required arrays exist\n        this.data = {\n          categories: loadedData.categories || [],\n          products: loadedData.products || [],\n          cartItems: loadedData.cartItems || [],\n          orders: loadedData.orders || [],\n          settings: loadedData.settings || [],\n          users: loadedData.users || [],\n          sessions: loadedData.sessions || [],\n          reviews: loadedData.reviews || [],\n          counters: {\n            categoryId: loadedData.counters?.categoryId || 1,\n            productId: loadedData.counters?.productId || 1,\n            cartItemId: loadedData.counters?.cartItemId || 1,\n            orderId: loadedData.counters?.orderId || 1,\n            userId: loadedData.counters?.userId || 1,\n            reviewId: loadedData.counters?.reviewId || 1\n          }\n        };\n      } else {\n        // Initialize with sample data\n        await this.initializeData();\n        await this.saveData();\n      }\n    } catch (error) {\n      console.error('Error loading data:', error);\n      await this.initializeData();\n    }\n  }\n\n  private async saveData() {\n    try {\n      await fs.writeFile(this.dbFile, JSON.stringify(this.data, null, 2));\n    } catch (error) {\n      console.error('Error saving data:', error);\n    }\n  }\n\n  private async initializeData() {\n    const sampleCategories = [\n      { name: \"Premium Makhana\", slug: \"premium-makhana\", description: \"Premium quality makhana varieties with superior taste and texture\", thumbnail: null },\n      { name: \"Organic Makhana\", slug: \"organic-makhana\", description: \"Organically grown makhana free from chemicals and pesticides\", thumbnail: null },\n      { name: \"Flavored Makhana\", slug: \"flavored-makhana\", description: \"Delicious makhana with traditional Indian spices and seasonings\", thumbnail: null },\n      { name: \"Roasted Makhana\", slug: \"roasted-makhana\", description: \"Perfectly roasted makhana with crispy texture and rich flavor\", thumbnail: null },\n      { name: \"Seasoned Makhana\", slug: \"seasoned-makhana\", description: \"Expertly seasoned makhana with traditional spices and herbs\", thumbnail: null },\n    ];\n\n    const sampleProducts = [\n      {\n        name: \"Premium Roasted Makhana\",\n        description: \"Premium quality roasted makhana with authentic Indian processing. Perfect for healthy snacking.\",\n        price: \"2999\",\n        categoryId: 1,\n        sku: \"POT001\",\n        featured: true,\n        stock: 15,\n        images: [\"/images/ceramic-vase-1.svg\"],\n        features: [\"Premium Quality\", \"Traditional Processing\", \"Healthy Snacking\"],\n        createdAt: new Date()\n      },\n      {\n        name: \"Organic Makhana Pack\",\n        description: \"Beautiful organic makhana with natural processing methods. Made by skilled farmers.\",\n        price: \"1899\",\n        categoryId: 2,\n        sku: \"TEX001\",\n        featured: true,\n        stock: 25,\n        images: [\"/images/silk-scarf-1.svg\"],\n        features: [\"Organic\", \"Natural processing\", \"Premium texture\"],\n        createdAt: new Date()\n      },\n      {\n        name: \"Flavored Makhana Mix\",\n        description: \"Exquisite flavored makhana mix showcasing traditional seasoning.\",\n        price: \"3499\",\n        categoryId: 3,\n        sku: \"JEW001\",\n        featured: false,\n        stock: 12,\n        images: [\"/images/silver-earrings-1.svg\"],\n        features: [\"Multiple flavors\", \"Traditional seasoning\", \"Nutritious\"],\n        createdAt: new Date()\n      },\n      {\n        name: \"Seasoned Makhana Variety\",\n        description: \"Intricately seasoned makhana variety with traditional spice blends.\",\n        price: \"1599\",\n        categoryId: 4,\n        sku: \"WOD001\",\n        featured: false,\n        stock: 8,\n        images: [\"/images/wooden-box-1.jpg\", \"/images/wooden-box-2.jpg\"],\n        features: [\"Hand-seasoned\", \"Traditional spices\", \"Healthy snacking\"],\n        createdAt: new Date()\n      },\n      {\n        name: \"Spiced Makhana Selection\",\n        description: \"Hand-seasoned makhana selection with vibrant flavors and traditional spices.\",\n        price: \"899\",\n        categoryId: 2,\n        sku: \"TEX002\",\n        featured: true,\n        stock: 30,\n        images: [\"/images/cushion-cover-1.jpg\"],\n        features: [\"Hand-seasoned\", \"Vibrant flavors\", \"Traditional spices\"],\n        createdAt: new Date()\n      },\n      {\n        name: \"Premium Makhana Assortment\",\n        description: \"Ornate makhana assortment with premium varieties, perfect for healthy indulgence.\",\n        price: \"2199\",\n        categoryId: 5,\n        sku: \"MET001\",\n        featured: false,\n        stock: 10,\n        images: [\"/images/brass-plate-1.jpg\", \"/images/brass-plate-2.jpg\"],\n        features: [\"Premium varieties\", \"Multiple textures\", \"Healthy indulgence\"],\n        createdAt: new Date()\n      }\n    ];\n\n    // Add categories\n    for (const cat of sampleCategories) {\n      const category: Category = { \n        ...cat, \n        id: this.data.counters.categoryId++,\n        thumbnail: cat.thumbnail || null\n      };\n      this.data.categories.push(category);\n    }\n\n    // Add products\n    for (const prod of sampleProducts) {\n      const product: Product = { \n        ...prod, \n        id: this.data.counters.productId++\n      };\n      this.data.products.push(product);\n    }\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return [...this.data.categories];\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return this.data.categories.find(cat => cat.slug === slug);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const newCategory: Category = { \n      ...category, \n      id: this.data.counters.categoryId++,\n      description: category.description || null,\n      thumbnail: category.thumbnail || null\n    };\n    this.data.categories.push(newCategory);\n    await this.saveData();\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const index = this.data.categories.findIndex(cat => cat.id === id);\n    if (index === -1) return undefined;\n\n    const updated: Category = { \n      ...this.data.categories[index], \n      ...category,\n      description: category.description !== undefined ? category.description : this.data.categories[index].description\n    };\n    this.data.categories[index] = updated;\n    await this.saveData();\n    return updated;\n  }\n\n  async deleteCategory(id: number): Promise<boolean> {\n    const index = this.data.categories.findIndex(cat => cat.id === id);\n    if (index === -1) return false;\n\n    // Check if any products are using this category\n    const productsUsingCategory = this.data.products.filter(product => product.categoryId === id);\n    if (productsUsingCategory.length > 0) {\n      throw new Error(`Cannot delete category. ${productsUsingCategory.length} product(s) are still using this category.`);\n    }\n\n    this.data.categories.splice(index, 1);\n    await this.saveData();\n    return true;\n  }\n\n  // Products\n  async getProducts(categoryId?: number): Promise<Product[]> {\n    if (categoryId) {\n      return this.data.products.filter(product => product.categoryId === categoryId);\n    }\n    return [...this.data.products];\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return this.data.products.filter(product => product.featured);\n  }\n\n  async getProductsWithCategory(): Promise<ProductWithCategory[]> {\n    return this.data.products\n      .map(product => {\n        const category = this.data.categories.find(cat => cat.id === product.categoryId);\n        if (!category) {\n          // Return null for products with missing categories so we can filter them out\n          return null;\n        }\n        return {\n          ...product,\n          category\n        };\n      })\n      .filter((product): product is ProductWithCategory => product !== null);\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.data.products.find(product => product.id === id);\n  }\n\n  async getProductWithCategory(id: number): Promise<ProductWithCategory | undefined> {\n    const product = this.data.products.find(p => p.id === id);\n    if (!product) return undefined;\n\n    const category = this.data.categories.find(cat => cat.id === product.categoryId);\n    if (!category) return undefined; // Don't return product if category is missing\n\n    return {\n      ...product,\n      category\n    };\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return this.data.products.filter(product => \n      product.name.toLowerCase().includes(lowercaseQuery) ||\n      product.description.toLowerCase().includes(lowercaseQuery)\n    );\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const newProduct: Product = { \n      ...product, \n      id: this.data.counters.productId++,\n      stock: product.stock || 0,\n      images: product.images || [],\n      featured: product.featured || false,\n      createdAt: new Date(),\n      features: product.features || []\n    };\n    this.data.products.push(newProduct);\n    await this.saveData();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const index = this.data.products.findIndex(p => p.id === id);\n    if (index === -1) return undefined;\n\n    const updated: Product = { \n      ...this.data.products[index], \n      ...product,\n      features: product.features !== undefined ? product.features : this.data.products[index].features\n    };\n    this.data.products[index] = updated;\n    await this.saveData();\n    return updated;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const index = this.data.products.findIndex(p => p.id === id);\n    if (index === -1) return false;\n\n    this.data.products.splice(index, 1);\n    await this.saveData();\n    return true;\n  }\n\n  // Cart\n  async getCartItems(sessionId: string): Promise<CartItemWithProduct[]> {\n    const cartItems = this.data.cartItems.filter(item => item.sessionId === sessionId);\n    return cartItems.map(item => {\n      const product = this.data.products.find(p => p.id === item.productId);\n      return {\n        ...item,\n        product: product!\n      };\n    });\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    const existingIndex = this.data.cartItems.findIndex(\n      item => item.sessionId === cartItem.sessionId && item.productId === cartItem.productId\n    );\n\n    if (existingIndex !== -1) {\n      // Update existing item\n      const existing = this.data.cartItems[existingIndex];\n      existing.quantity += cartItem.quantity || 1;\n      await this.saveData();\n      return existing;\n    } else {\n      // Create new item\n      const newItem: CartItem = {\n        id: this.data.counters.cartItemId++,\n        ...cartItem,\n        quantity: cartItem.quantity || 1,\n        createdAt: new Date()\n      };\n      this.data.cartItems.push(newItem);\n      await this.saveData();\n      return newItem;\n    }\n  }\n\n  async updateCartItem(sessionId: string, productId: number, quantity: number): Promise<CartItem | undefined> {\n    const index = this.data.cartItems.findIndex(\n      item => item.sessionId === sessionId && item.productId === productId\n    );\n    if (index === -1) return undefined;\n\n    this.data.cartItems[index].quantity = quantity;\n    await this.saveData();\n    return this.data.cartItems[index];\n  }\n\n  async removeFromCart(sessionId: string, productId: number): Promise<boolean> {\n    const index = this.data.cartItems.findIndex(\n      item => item.sessionId === sessionId && item.productId === productId\n    );\n    if (index === -1) return false;\n\n    this.data.cartItems.splice(index, 1);\n    await this.saveData();\n    return true;\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    const initialLength = this.data.cartItems.length;\n    this.data.cartItems = this.data.cartItems.filter(item => item.sessionId !== sessionId);\n\n    if (this.data.cartItems.length !== initialLength) {\n      await this.saveData();\n      return true;\n    }\n    return false;\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return [...this.data.orders];\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    return this.data.orders.find(order => order.id === id);\n  }\n\n  private generateTrackingNumber(): string {\n    const timestamp = Date.now().toString(36).toUpperCase();\n    const random = Math.random().toString(36).substr(2, 4).toUpperCase();\n    return `TRK${timestamp}${random}`;\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    // Validate required fields\n    if (!order.userId) {\n      throw new Error(\"User ID is required\");\n    }\n    if (!order.customerName) {\n      throw new Error(\"Customer name is required\");\n    }\n    if (!order.customerEmail) {\n      throw new Error(\"Customer email is required\");\n    }\n    if (!order.shippingAddress) {\n      throw new Error(\"Shipping address is required\");\n    }\n    if (!order.total) {\n      throw new Error(\"Order total is required\");\n    }\n    if (!order.items) {\n      throw new Error(\"Order items are required\");\n    }\n\n    // Generate unique tracking number\n    let trackingNumber;\n    do {\n      trackingNumber = this.generateTrackingNumber();\n    } while (this.data.orders.some(o => o.trackingNumber === trackingNumber));\n\n    const newOrder: Order = {\n      id: this.data.counters.orderId++,\n      userId: order.userId,\n      customerName: order.customerName,\n      customerEmail: order.customerEmail,\n      customerPhone: order.customerPhone || null,\n      shippingAddress: order.shippingAddress,\n      total: order.total,\n      status: order.status || \"pending\",\n      trackingNumber: trackingNumber,\n      items: order.items,\n      createdAt: new Date()\n    };\n    \n    this.data.orders.push(newOrder);\n    await this.saveData();\n    return newOrder;\n  }\n\n  async getOrderByTrackingNumber(trackingNumber: string): Promise<Order | undefined> {\n    return this.data.orders.find(order => order.trackingNumber === trackingNumber);\n  }\n\n  async updateOrderStatus(id: number, status: string): Promise<Order | undefined> {\n    const index = this.data.orders.findIndex(order => order.id === id);\n    if (index === -1) return undefined;\n\n    const updated: Order = { ...this.data.orders[index], status };\n    this.data.orders[index] = updated;\n    await this.saveData();\n    return updated;\n  }\n\n  // Settings\n  async getSettings(): Promise<Setting[]> {\n    if (!this.data.settings) {\n      this.data.settings = [];\n    }\n    return this.data.settings;\n  }\n\n  async getSetting(key: string): Promise<Setting | undefined> {\n    const settings = await this.getSettings();\n    return settings.find(s => s.key === key) || null;\n  }\n\n  async createSetting(setting: InsertSetting): Promise<Setting> {\n    if (!this.data.settings) {\n      this.data.settings = [];\n    }\n\n    const existingSetting = this.data.settings.find(s => s.key === setting.key);\n    if (existingSetting) {\n      throw new Error(`Setting with key '${setting.key}' already exists`);\n    }\n\n    const newSetting: Setting = {\n      id: this.data.counters.orderId++,\n      ...setting,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.data.settings.push(newSetting);\n    await this.saveData();\n    return newSetting;\n  }\n\n  async updateSetting(key: string, value: string): Promise<Setting | undefined> {\n    if (!this.data.settings) {\n      this.data.settings = [];\n    }\n\n    const index = this.data.settings.findIndex(setting => setting.key === key);\n    if (index === -1) return undefined;\n\n    const updated: Setting = { ...this.data.settings[index], value: value, updatedAt: new Date().toISOString() };\n    this.data.settings[index] = updated;\n    await this.saveData();\n    return updated;\n  }\n\n  async deleteSetting(key: string): Promise<boolean> {\n    if (!this.data.settings) {\n      return false;\n    }\n\n    const initialLength = this.data.settings.length;\n    this.data.settings = this.data.settings.filter(setting => setting.key !== key);\n\n    if (this.data.settings.length < initialLength) {\n      await this.saveData();\n      return true;\n    }\n    return false;\n  }\n\n  // User management\n  async createUser(userData: InsertUser): Promise<User> {\n    if (!this.data.users) {\n      this.data.users = [];\n    }\n\n    // Check if user already exists\n    const existingUser = await this.getUserByEmail(userData.email);\n    if (existingUser) {\n      throw new Error(\"User with this email already exists\");\n    }\n\n    const id = this.getNextId('users');\n    const user: User = {\n      id,\n      name: userData.name,\n      email: userData.email,\n      passwordHash: userData.passwordHash,\n      wishlist: [],\n      createdAt: new Date().toISOString(),\n    };\n\n    this.data.users.push(user);\n    await this.saveData();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (!this.data.users) {\n      this.data.users = [];\n    }\n    return this.data.users.find(user => user.email === email);\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    if (!this.data.users) {\n      this.data.users = [];\n    }\n    return this.data.users.find(user => user.id === id);\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n\n    const isValid = await bcrypt.compare(password, user.passwordHash);\n    return isValid ? user : null;\n  }\n\n  async createSession(userId: number): Promise<string> {\n    if (!this.data.sessions) {\n      this.data.sessions = [];\n    }\n\n    const sessionId = Math.random().toString(36).substring(7) + Date.now().toString(36);\n    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days\n\n    this.data.sessions.push({ sessionId, userId, expiresAt });\n    await this.saveData();\n    return sessionId;\n  }\n\n  async getSessionUser(sessionId: string): Promise<User | null> {\n    if (!this.data.sessions) {\n      this.data.sessions = [];\n    }\n\n    const session = this.data.sessions.find(s => s.sessionId === sessionId);\n    if (!session || new Date(session.expiresAt) < new Date()) {\n      return null;\n    }\n\n    return this.getUserById(session.userId) || null;\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    if (!this.data.sessions) {\n      this.data.sessions = [];\n    }\n\n    this.data.sessions = this.data.sessions.filter(s => s.sessionId !== sessionId);\n    await this.saveData();\n  }\n\n  async addToWishlist(userId: number, productId: number): Promise<User | undefined> {\n    const user = await this.getUserById(userId);\n    if (!user) return undefined;\n\n    // Initialize wishlist if it doesn't exist\n    if (!user.wishlist) {\n      user.wishlist = [];\n    }\n\n    // Don't add if already in wishlist\n    if (!user.wishlist.includes(productId)) {\n      user.wishlist.push(productId);\n      await this.saveData();\n    }\n\n    return user;\n  }\n\n  async removeFromWishlist(userId: number, productId: number): Promise<User | undefined> {\n    const user = await this.getUserById(userId);\n    if (!user) return undefined;\n\n    if (!user.wishlist) {\n      user.wishlist = [];\n    }\n\n    user.wishlist = user.wishlist.filter(id => id !== productId);\n    await this.saveData();\n\n    return user;\n  }\n\n  async getWishlist(userId: number): Promise<Product[]> {\n    const user = await this.getUserById(userId);\n    if (!user || !user.wishlist) return [];\n\n    const wishlistProducts: Product[] = [];\n    for (const productId of user.wishlist) {\n      const product = await this.getProduct(productId);\n      if (product) {\n        wishlistProducts.push(product);\n      }\n    }\n\n    return wishlistProducts;\n  }\n\n  // Reviews\n  async createReview(review: InsertReview): Promise<Review> {\n    // Check if user has already reviewed this product\n    const existingReview = this.data.reviews.find(\n      r => r.productId === review.productId && r.userId === review.userId\n    );\n    \n    if (existingReview) {\n      throw new Error(\"You have already reviewed this product\");\n    }\n\n    // Get user name\n    const user = await this.getUserById(review.userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    // Verify product exists\n    const product = await this.getProduct(review.productId);\n    if (!product) {\n      throw new Error(\"Product not found\");\n    }\n\n    const newReview: Review = {\n      id: this.data.counters.reviewId++,\n      productId: review.productId,\n      userId: review.userId,\n      rating: review.rating,\n      comment: review.comment,\n      title: review.title,\n      userName: user.name,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.data.reviews.push(newReview);\n    await this.saveData();\n    return newReview;\n  }\n\n  async getProductReviews(productId: number): Promise<Review[]> {\n    return this.data.reviews\n      .filter(review => review.productId === productId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getUserReviews(userId: number): Promise<Review[]> {\n    return this.data.reviews\n      .filter(review => review.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async updateReview(id: number, review: Partial<InsertReview>): Promise<Review | undefined> {\n    const index = this.data.reviews.findIndex(r => r.id === id);\n    if (index === -1) return undefined;\n\n    const updated: Review = {\n      ...this.data.reviews[index],\n      ...review,\n      updatedAt: new Date().toISOString(),\n    };\n    \n    this.data.reviews[index] = updated;\n    await this.saveData();\n    return updated;\n  }\n\n  async deleteReview(id: number, userId: number): Promise<boolean> {\n    const index = this.data.reviews.findIndex(r => r.id === id && r.userId === userId);\n    if (index === -1) return false;\n\n    this.data.reviews.splice(index, 1);\n    await this.saveData();\n    return true;\n  }\n\n  async getProductReviewStats(productId: number): Promise<{\n    averageRating: number;\n    totalReviews: number;\n    ratingDistribution: { [key: number]: number };\n  }> {\n    const reviews = await this.getProductReviews(productId);\n    \n    if (reviews.length === 0) {\n      return {\n        averageRating: 0,\n        totalReviews: 0,\n        ratingDistribution: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 }\n      };\n    }\n\n    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\n    const averageRating = totalRating / reviews.length;\n\n    const ratingDistribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    reviews.forEach(review => {\n      ratingDistribution[review.rating]++;\n    });\n\n    return {\n      averageRating: Math.round(averageRating * 10) / 10, // Round to 1 decimal place\n      totalReviews: reviews.length,\n      ratingDistribution\n    };\n  }\n\n  private getNextId(table: 'products' | 'categories' | 'cartItems' | 'orders' | 'settings' | 'users' | 'reviews'): number {\n    if (table === 'products') {\n      return this.data.counters.productId++;\n    } else if (table === 'categories') {\n      return this.data.counters.categoryId++;\n    } else if (table === 'cartItems') {\n      return this.data.counters.cartItemId++;\n    } else if (table === 'orders') {\n      return this.data.counters.orderId++;\n    } else if (table === 'settings') {\n        return this.data.counters.orderId++; //Using orderId as settings id.\n    } else if (table === 'users') {\n        return this.data.counters.userId++;\n    } else if (table === 'reviews') {\n        return this.data.counters.reviewId++;\n    }\n    throw new Error(`Invalid table name: ${table}`);\n  }\n}","size_bytes":25788},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { join } from \"path\";\nimport fs from \"fs\";\nimport express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertOrderSchema, insertCartItemSchema, insertCategorySchema, insertSettingSchema, insertReviewSchema } from \"@shared/schema\";\nimport { registerSchema, loginSchema } from \"@shared/auth-schema\";\nimport { z } from \"zod\";\nimport bcrypt from 'bcrypt';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for image uploads with organized directory structure\n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n\n        // Determine upload type based on request path or referrer\n        let uploadType = 'products'; // default\n        if (req.headers.referer && req.headers.referer.includes('/admin') && req.headers.referer.includes('categories')) {\n          uploadType = 'categories';\n        }\n\n        const uploadPath = join(process.cwd(), 'data', 'images', uploadType, `${year}`, `${month}`, `${day}`);\n\n        try {\n          fs.mkdirSync(uploadPath, { recursive: true });\n          cb(null, uploadPath);\n        } catch (error) {\n          cb(error as any, '');\n        }\n      },\n      filename: (req, file, cb) => {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n        const extension = file.originalname.split('.').pop();\n        const sanitizedName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n        cb(null, `${sanitizedName.split('.')[0]}_${uniqueSuffix}.${extension}`);\n      }\n    }),\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files (JPEG, PNG, WebP, GIF) are allowed') as any, false);\n      }\n    },\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    }\n  });\n\n  // Serve static images\n  app.use('/images', express.static(join(process.cwd(), 'data', 'images')));\n\n  // Serve logo specifically\n  app.get(\"/images/logo.png\", (req, res) => {\n    res.sendFile(join(process.cwd(), \"data\", \"images\", \"logo.png\"));\n  });\n\n  // Authentication middleware\n  const requireAuth = async (req: any, res: any, next: any) => {\n    const sessionId = req.headers.authorization?.replace('Bearer ', '');\n    if (!sessionId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    const user = await storage.getSessionUser(sessionId);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid session\" });\n    }\n\n    req.user = user;\n    req.sessionId = sessionId;\n    next();\n  };\n\n  // Rate limiting for admin login attempts\n  const adminLoginAttempts = new Map<string, { count: number; lastAttempt: number }>();\n  const MAX_ADMIN_LOGIN_ATTEMPTS = 5;\n  const ADMIN_LOGIN_TIMEOUT = 15 * 60 * 1000; // 15 minutes\n\n  // Admin session storage\n  const adminSessions = new Map<string, { username: string; expiresAt: number }>();\n\n  // Admin authentication middleware\n  const requireAdminAuth = async (req: any, res: any, next: any) => {\n    const authHeader = req.headers.authorization;\n\n    // Check for session token first\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const sessionToken = authHeader.slice('Bearer '.length);\n      const session = adminSessions.get(sessionToken);\n\n      if (session && session.expiresAt > Date.now()) {\n        req.adminUser = session.username;\n        return next();\n      } else {\n        // Remove expired session\n        adminSessions.delete(sessionToken);\n      }\n    }\n\n    // Fallback to basic auth for initial login\n    if (!authHeader || !authHeader.startsWith('Basic ')) {\n      return res.status(401).json({ message: \"Admin authentication required\" });\n    }\n\n    const clientIP = req.ip || req.connection.remoteAddress || 'unknown';\n    const attempts = adminLoginAttempts.get(clientIP);\n\n    if (attempts && attempts.count >= MAX_ADMIN_LOGIN_ATTEMPTS) {\n      if (Date.now() - attempts.lastAttempt < ADMIN_LOGIN_TIMEOUT) {\n        return res.status(429).json({ \n          message: \"Too many login attempts. Please try again later.\",\n          retryAfter: Math.ceil((ADMIN_LOGIN_TIMEOUT - (Date.now() - attempts.lastAttempt)) / 1000)\n        });\n      } else {\n        // Reset after timeout\n        adminLoginAttempts.delete(clientIP);\n      }\n    }\n\n    const base64Credentials = authHeader.slice('Basic '.length);\n    const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');\n    const [username, password] = credentials.split(':');\n\n    const adminUsername = process.env.ADMIN_USERNAME || 'admin';\n    const adminPasswordHash = process.env.ADMIN_PASSWORD_HASH;\n\n    if (!adminPasswordHash) {\n      return res.status(500).json({ message: \"Admin authentication not configured properly\" });\n    }\n\n    try {\n      // Check if the password hash is already bcrypt hashed or plain text\n      let isValidPassword = false;\n\n      if (adminPasswordHash.startsWith('$2b$')) {\n        // It's already a bcrypt hash, compare directly\n        isValidPassword = await bcrypt.compare(password, adminPasswordHash);\n      } else {\n        // It's plain text, compare directly\n        isValidPassword = password === adminPasswordHash;\n      }\n\n      if (username !== adminUsername || !isValidPassword) {\n        // Record failed attempt\n        const currentAttempts = adminLoginAttempts.get(clientIP) || { count: 0, lastAttempt: 0 };\n        adminLoginAttempts.set(clientIP, {\n          count: currentAttempts.count + 1,\n          lastAttempt: Date.now()\n        });\n\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      // Reset login attempts on successful login\n      adminLoginAttempts.delete(clientIP);\n      req.adminUser = username;\n      next();\n    } catch (error) {\n      return res.status(500).json({ message: \"Authentication error\" });\n    }\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n\n      // Hash password\n      const saltRounds = 10;\n      const passwordHash = await bcrypt.hash(validatedData.password, saltRounds);\n\n      const user = await storage.createUser({\n        name: validatedData.name,\n        email: validatedData.email,\n        passwordHash,\n        wishlist: [],\n      });\n\n      // Create session\n      const sessionId = await storage.createSession(user.id);\n\n      res.status(201).json({\n        user: { id: user.id, name: user.name, email: user.email },\n        sessionId,\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n\n      const user = await storage.verifyPassword(validatedData.email, validatedData.password);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      const sessionId = await storage.createSession(user.id);\n\n      res.json({\n        user: { id: user.id, name: user.name, email: user.email },\n        sessionId,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(401).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (sessionId) {\n        await storage.deleteSession(sessionId);\n      }\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (!sessionId) {\n        return res.status(401).json({ message: \"No session\" });\n      }\n\n      const user = await storage.getSessionUser(sessionId);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      res.json({ id: user.id, name: user.name, email: user.email });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user info\" });\n    }\n  });\n\n  // Admin authentication route with session creation\n  app.post(\"/api/admin/auth\", requireAdminAuth, (req: any, res) => {\n    // Generate session token\n    const sessionToken = crypto.randomBytes(32).toString('hex');\n    const sessionTimeout = parseInt(process.env.ADMIN_SESSION_TIMEOUT_HOURS || '8') * 60 * 60 * 1000;\n\n    adminSessions.set(sessionToken, {\n      username: req.adminUser,\n      expiresAt: Date.now() + sessionTimeout\n    });\n\n    res.json({ \n      message: \"Admin authenticated successfully\",\n      sessionToken,\n      expiresAt: Date.now() + sessionTimeout\n    });\n  });\n\n  // Admin logout route\n  app.post(\"/api/admin/logout\", (req, res) => {\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const sessionToken = authHeader.slice('Bearer '.length);\n      adminSessions.delete(sessionToken);\n    }\n    res.json({ message: \"Admin logged out successfully\" });\n  });\n\n  // Admin session validation route\n  app.get(\"/api/admin/me\", requireAdminAuth, (req: any, res) => {\n    res.json({ \n      username: req.adminUser,\n      authenticated: true \n    });\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist\", async (req, res) => {\n    try {\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = await storage.getSessionUser(sessionId);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      const wishlistProducts = await storage.getWishlist(user.id);\n      res.json(wishlistProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist/:productId\", async (req, res) => {\n    try {\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = await storage.getSessionUser(sessionId);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      const productId = parseInt(req.params.productId);\n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n\n      const updatedUser = await storage.addToWishlist(user.id, productId);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"Product added to wishlist\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:productId\", async (req, res) => {\n    try {\n      const sessionId = req.headers.authorization?.replace('Bearer ', '');\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = await storage.getSessionUser(sessionId);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      const productId = parseInt(req.params.productId);\n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n\n      const updatedUser = await storage.removeFromWishlist(user.id, productId);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"Product removed from wishlist\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Category image upload endpoint\n  app.post(\"/api/upload-category-image\", multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n\n        const uploadPath = join(process.cwd(), 'data', 'images', 'categories', `${year}`, `${month}`, `${day}`);\n\n        try {\n          fs.mkdirSync(uploadPath, { recursive: true });\n          cb(null, uploadPath);\n        } catch (error) {\n          cb(error as any, '');\n        }\n      },\n      filename: (req, file, cb) => {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n        const extension = file.originalname.split('.').pop();\n        const sanitizedName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n        cb(null, `${sanitizedName.split('.')[0]}_${uniqueSuffix}.${extension}`);\n      }\n    }),\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files (JPEG, PNG, WebP, GIF) are allowed'), false);\n      }\n    },\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    }\n  }).single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file uploaded\" });\n      }\n\n      // Get relative path from data/images\n      const relativePath = req.file.path.split('data/images/')[1];\n      const imageUrl = `/images/${relativePath}`;\n\n      res.json({ \n        imageUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      console.error('Category image upload error:', error);\n      res.status(500).json({ message: \"Failed to upload category image\" });\n    }\n  });\n\n  // Homepage hero banner image upload endpoint\n  app.post(\"/api/upload-homepage-image\", multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n\n        const uploadPath = join(process.cwd(), 'data', 'images', 'homepage', 'hero', `${year}`, `${month}`, `${day}`);\n\n        try {\n          fs.mkdirSync(uploadPath, { recursive: true });\n          cb(null, uploadPath);\n        } catch (error) {\n          cb(error as any, '');\n        }\n      },\n      filename: (req, file, cb) => {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n        const extension = file.originalname.split('.').pop();\n        const sanitizedName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n        cb(null, `hero_banner_${sanitizedName.split('.')[0]}_${uniqueSuffix}.${extension}`);\n      }\n    }),\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files (JPEG, PNG, WebP, GIF) are allowed'), false);\n      }\n    },\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    }\n  }).single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No hero banner image file uploaded\" });\n      }\n\n      // Get relative path from data/images\n      const relativePath = req.file.path.split('data/images/')[1];\n      const imageUrl = `/images/${relativePath}`;\n\n      res.json({ \n        imageUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      console.error('Homepage hero banner image upload error:', error);\n      res.status(500).json({ message: \"Failed to upload hero banner image\" });\n    }\n  });\n\n  // Product image upload endpoint\n  app.post(\"/api/upload-image\", upload.single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file uploaded\" });\n      }\n\n      // Get relative path from data/images\n      const relativePath = req.file.path.split('data/images/')[1];\n      const imageUrl = `/images/${relativePath}`;\n\n      res.json({ \n        imageUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      console.error('Image upload error:', error);\n      res.status(500).json({ message: \"Failed to upload image\" });\n    }\n  });\n\n  // Delete image endpoint\n  app.delete(\"/api/delete-image\", (req, res) => {\n    try {\n      const { imageUrl } = req.body;\n\n      if (!imageUrl) {\n        return res.status(400).json({ message: \"Image URL is required\" });\n      }\n\n      // Convert URL to file path\n      const imagePath = imageUrl.replace('/images/', '');\n      const fullPath = join(process.cwd(), 'data', 'images', imagePath);\n\n      // Delete the file\n      import('fs').then(fs => {\n        fs.unlink(fullPath, (err) => {\n          if (err) {\n            // If file doesn't exist, that's okay - it's already \"deleted\"\n            if (err.code === 'ENOENT') {\n              console.log('Image file already deleted or does not exist:', fullPath);\n              return res.json({ message: \"Image deleted successfully (file was already removed)\" });\n            }\n            // For other errors, still return error\n            console.error('Error deleting image:', err);\n            return res.status(500).json({ message: \"Failed to delete image file\" });\n          }\n          res.json({ message: \"Image deleted successfully\" });\n        });\n      }).catch(error => {\n        console.error('Error importing fs:', error);\n        res.status(500).json({ message: \"Failed to delete image\" });\n      });\n    } catch (error) {\n      console.error('Image deletion error:', error);\n      res.status(500).json({ message: \"Failed to delete image\" });\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:slug\", async (req, res) => {\n    try {\n      const category = await storage.getCategoryBySlug(req.params.slug);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  app.post(\"/api/categories\", requireAdminAuth, async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", requireAdminAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(id, validatedData);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", requireAdminAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteCategory(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error: any) {\n      if (error.message && error.message.includes(\"Cannot delete category\")) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, search, featured } = req.query;\n      let products;\n\n      if (search) {\n        products = await storage.searchProducts(search as string);\n      } else if (featured === \"true\") {\n        products = await storage.getFeaturedProducts();\n      } else if (category) {\n        const categoryRecord = await storage.getCategoryBySlug(category as string);\n        if (categoryRecord) {\n          products = await storage.getProducts(categoryRecord.id);\n        } else {\n          products = await storage.getProducts();\n        }\n      } else {\n        products = await storage.getProducts();\n      }\n\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products-with-category\", async (req, res) => {\n    try {\n      const products = await storage.getProductsWithCategory();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products with categories\" });\n    }\n  });\n\n  // Get single product with category\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProductWithCategory(id);\n\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Get recommended products for a specific product\n  app.get(\"/api/products/:id/recommendations\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id);\n\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      const allProducts = await storage.getProducts();\n      const otherProducts = allProducts.filter(p => p.id !== id);\n\n      // Score products based on similarity\n      const scoredProducts = otherProducts.map(p => {\n        let score = 0;\n\n        // Same category gets highest score\n        if (p.categoryId === product.categoryId) {\n          score += 50;\n        }\n\n        // Calculate feature similarity\n        const productFeatures = product.features || [];\n        const otherFeatures = p.features || [];\n\n        if (productFeatures.length > 0 && otherFeatures.length > 0) {\n          const commonFeatures = productFeatures.filter(feature => \n            otherFeatures.some(otherFeature => \n              otherFeature.toLowerCase().includes(feature.toLowerCase()) ||\n              feature.toLowerCase().includes(otherFeature.toLowerCase())\n            )\n          );\n          score += (commonFeatures.length / Math.max(productFeatures.length, otherFeatures.length)) * 30;\n        }\n\n        // Similar price range (within 20% gets points)\n        const productPrice = parseFloat(product.price);\n        const otherPrice = parseFloat(p.price);\n        const priceDiff = Math.abs(productPrice - otherPrice) / productPrice;\n        if (priceDiff <= 0.2) {\n          score += 10;\n        } else if (priceDiff <= 0.5) {\n          score += 5;\n        }\n\n        // Featured products get slight boost\n        if (p.featured) {\n          score += 5;\n        }\n\n        // In stock products get slight boost\n        if (p.stock > 0) {\n          score += 3;\n        }\n\n        return { ...p, similarityScore: score };\n      });\n\n      // Sort by similarity score and return top 8\n      const recommendations = scoredProducts\n        .sort((a, b) => b.similarityScore - a.similarityScore)\n        .slice(0, 8)\n        .map(({ similarityScore, ...product }) => product); // Remove score from final result\n\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error fetching recommendations:\", error);\n      res.status(500).json({ error: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAdminAuth, async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", requireAdminAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, validatedData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", requireAdminAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteProduct(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Cart\n  app.get(\"/api/cart/:sessionId\", async (req, res) => {\n    try {\n      const cartItems = await storage.getCartItems(req.params.sessionId);\n      res.json(cartItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cart items\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const validatedData = insertCartItemSchema.parse(req.body);\n      const cartItem = await storage.addToCart(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid cart item data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to add item to cart\" });\n    }\n  });\n\n  app.put(\"/api/cart/:sessionId/:productId\", async (req, res) => {\n    try {\n      const sessionId = req.params.sessionId;\n      const productId = parseInt(req.params.productId);\n      const { quantity } = req.body;\n\n      if (typeof quantity !== \"number\" || quantity < 0) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n\n      const cartItem = await storage.updateCartItem(sessionId, productId, quantity);\n      res.json(cartItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:sessionId/:productId\", async (req, res) => {\n    try {\n      const sessionId = req.params.sessionId;\n      const productId = parseInt(req.params.productId);\n      const removed = await storage.removeFromCart(sessionId, productId);\n      if (!removed) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove item from cart\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:sessionId\", async (req, res) => {\n    try {\n      await storage.clearCart(req.params.sessionId);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const order = await storage.getOrder(id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", requireAuth, async (req: any, res) => {\n    try {\n      // Add userId to the request body before validation\n      const orderData = {\n        ...req.body,\n        userId: req.user.id,\n      };\n\n      console.log(\"Order data received:\", orderData);\n\n      const validatedData = insertOrderSchema.parse(orderData);\n      const order = await storage.createOrder(validatedData);\n      res.status(201).json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"Order validation errors:\", error.errors);\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      console.error(\"Order creation error:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", requireAdminAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const order = await storage.updateOrderStatus(id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Track order by tracking number\n  app.get(\"/api/track/:trackingNumber\", async (req, res) => {\n    try {\n      const trackingNumber = req.params.trackingNumber.toUpperCase();\n      const order = await storage.getOrderByTrackingNumber(trackingNumber);\n\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found with this tracking number\" });\n      }\n\n      // Return order tracking info (without sensitive customer details for public tracking)\n      const trackingInfo = {\n        id: order.id,\n        trackingNumber: order.trackingNumber,\n        status: order.status,\n        createdAt: order.createdAt,\n        customerName: order.customerName.split(' ')[0], // Only first name for privacy\n        total: order.total\n      };\n\n      res.json(trackingInfo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to track order\" });\n    }\n  });\n\n  // Settings endpoints\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.get(\"/api/settings/:key\", async (req, res) => {\n    try {\n      const setting = await storage.getSetting(req.params.key);\n      if (!setting) {\n        return res.status(404).json({ message: \"Setting not found\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setting\" });\n    }\n  });\n\n  app.post(\"/api/settings\", requireAdminAuth, async (req, res) => {\n    try {\n      const validatedData = insertSettingSchema.parse(req.body);\n      const setting = await storage.createSetting(validatedData);\n      res.status(201).json(setting);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid setting data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create setting\" });\n    }\n  });\n\n  app.put(\"/api/settings/:key\", requireAdminAuth, async (req, res) => {\n    try {\n      const { value } = req.body;\n      if (typeof value !== \"string\") {\n        return res.status(400).json({ message: \"Value must be a string\" });\n      }\n\n      const setting = await storage.updateSetting(req.params.key, value);\n      if (!setting) {\n        return res.status(404).json({ message: \"Setting not found\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update setting\" });\n    }\n  });\n\n  app.delete(\"/api/settings/:key\", requireAdminAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deleteSetting(req.params.key);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Setting not found\" });\n      }\n      res.json({ message: \"Setting deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete setting\" });\n    }\n  });\n\n  // Review routes\n  app.get(\"/api/products/:productId/reviews\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.productId);\n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n\n      const reviews = await storage.getProductReviews(productId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.get(\"/api/products/:productId/review-stats\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.productId);\n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n\n      const stats = await storage.getProductReviewStats(productId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch review stats\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", requireAuth, async (req: any, res) => {\n    try {\n      const reviewData = {\n        ...req.body,\n        userId: req.user.id,\n      };\n\n      const validatedData = insertReviewSchema.parse(reviewData);\n      const review = await storage.createReview(validatedData);\n      res.status(201).json(review);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(400).json({ message: error.message || \"Failed to create review\" });\n    }\n  });\n\n  app.get(\"/api/users/reviews\", requireAuth, async (req: any, res) => {\n    try {\n      const reviews = await storage.getUserReviews(req.user.id);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user reviews\" });\n    }\n  });\n\n  app.put(\"/api/reviews/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid review ID\" });\n      }\n\n      // Verify the review belongs to the user\n      const existingReview = await storage.getProductReviews(0); // We'll need to get by ID\n      const userReview = existingReview.find(r => r.id === id && r.userId === req.user.id);\n      if (!userReview) {\n        return res.status(404).json({ message: \"Review not found or not authorized\" });\n      }\n\n      const validatedData = insertReviewSchema.partial().parse(req.body);\n      const review = await storage.updateReview(id, validatedData);\n      res.json(review);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update review\" });\n    }\n  });\n\n  app.delete(\"/api/reviews/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid review ID\" });\n      }\n\n      const deleted = await storage.deleteReview(id, req.user.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Review not found or not authorized\" });\n      }\n\n      res.json({ message: \"Review deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete review\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":37462},"server/storage.ts":{"content":"import { \n  categories, \n  products, \n  cartItems, \n  orders,\n  type Category, \n  type Product, \n  type CartItem, \n  type Order,\n  type InsertCategory, \n  type InsertProduct, \n  type InsertCartItem, \n  type InsertOrder,\n  type ProductWithCategory,\n  type CartItemWithProduct,\n  Setting,\n  InsertSetting,\n  Review,\n  InsertReview\n} from \"@shared/schema\";\nimport type { User, InsertUser } from \"@shared/auth-schema\";\n\nexport interface IStorage {\n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: number): Promise<boolean>;\n\n  // Products\n  getProducts(categoryId?: number): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  getProductsWithCategory(): Promise<ProductWithCategory[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  getProductWithCategory(id: number): Promise<ProductWithCategory | undefined>;\n  searchProducts(query: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n\n  // Cart\n  getCartItems(sessionId: string): Promise<CartItemWithProduct[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(sessionId: string, productId: number, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(sessionId: string, productId: number): Promise<boolean>;\n  clearCart(sessionId: string): Promise<boolean>;\n\n  // Orders\n  getOrders(): Promise<Order[]>;\n  getOrder(id: number): Promise<Order | undefined>;\n  getOrderByTrackingNumber(trackingNumber: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: number, status: string): Promise<Order | undefined>;\n\n  // Settings\n  getSettings(): Promise<any[]>;\n  getSetting(key: string): Promise<any>;\n  createSetting(setting: any): Promise<any>;\n  updateSetting(key: string, value: string): Promise<any>;\n  deleteSetting(key: string): Promise<boolean>;\n\n  // User management\n  createUser(userData: InsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: number): Promise<User | undefined>;\n  verifyPassword(email: string, password: string): Promise<User | null>;\n  createSession(userId: number): Promise<string>;\n  getSessionUser(sessionId: string): Promise<User | null>;\n  deleteSession(sessionId: string): Promise<void>;\n\n  // Wishlist\n  addToWishlist(userId: number, productId: number): Promise<User | undefined>;\n  removeFromWishlist(userId: number, productId: number): Promise<User | undefined>;\n  getWishlist(userId: number): Promise<Product[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private categories: Map<number, Category> = new Map();\n  private products: Map<number, Product> = new Map();\n  private cartItems: Map<string, CartItem[]> = new Map(); // sessionId -> CartItem[]\n  private orders: Map<number, Order> = new Map();\n\n  private categoryIdCounter = 1;\n  private productIdCounter = 1;\n  private cartItemIdCounter = 1;\n  private orderIdCounter = 1;\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize categories\n    const defaultCategories: InsertCategory[] = [\n      { name: \"Pottery\", slug: \"pottery\", description: \"Traditional Indian terracotta and ceramic crafts\" },\n      { name: \"Textiles\", slug: \"textiles\", description: \"Handwoven fabrics and traditional Indian textiles\" },\n      { name: \"Jewelry\", slug: \"jewelry\", description: \"Traditional Indian jewelry and ornaments\" },\n      { name: \"Woodwork\", slug: \"woodwork\", description: \"Carved wooden sculptures and decorative items\" },\n    ];\n\n    defaultCategories.forEach(cat => {\n      const category: Category = { ...cat, id: this.categoryIdCounter++ };\n      this.categories.set(category.id, category);\n    });\n\n    // Initialize products\n    const defaultProducts: InsertProduct[] = [\n      {\n        name: \"Traditional Ceramic Vase\",\n        description: \"Handcrafted terracotta vase with traditional motifs, perfect for home decoration\",\n        price: \"2499.00\",\n        categoryId: 1,\n        stock: 15,\n        images: [\"https://images.unsplash.com/photo-1610701596007-11502861dcfa?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"],\n        sku: \"CV001\",\n        featured: true,\n      },\n      {\n        name: \"Handwoven Silk Scarf\",\n        description: \"Pure silk scarf with traditional block prints, representing centuries of textile tradition\",\n        price: \"1899.00\",\n        categoryId: 2,\n        stock: 25,\n        images: [\"https://pixabay.com/get/ge38fe36925472b2370d0d560ec16daa99f0dd916a903049dd8c1db288d1277d1f3b4fcba0984df6668c7c9f94ba74287a068aa3195fc5e59a33742257a6a1c34_1280.jpg\"],\n        sku: \"SS002\",\n        featured: true,\n      },\n      {\n        name: \"Traditional Silver Necklace\",\n        description: \"Handcrafted silver necklace with intricate traditional designs\",\n        price: \"4999.00\",\n        categoryId: 3,\n        stock: 8,\n        images: [\"https://images.unsplash.com/photo-1602751584552-8ba73aad10e1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"],\n        sku: \"SN003\",\n        featured: true,\n      },\n      {\n        name: \"Carved Wooden Elephant\",\n        description: \"Intricately carved sandalwood elephant sculpture, a symbol of prosperity\",\n        price: \"3299.00\",\n        categoryId: 4,\n        stock: 12,\n        images: [\"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"],\n        sku: \"WE004\",\n        featured: true,\n      },\n      {\n        name: \"Embroidered Cushion Cover\",\n        description: \"Beautiful cushion cover with traditional Indian embroidery work\",\n        price: \"899.00\",\n        categoryId: 2,\n        stock: 30,\n        images: [\"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"],\n        sku: \"CC005\",\n        featured: false,\n      },\n      {\n        name: \"Brass Oil Lamp\",\n        description: \"Traditional brass diya perfect for festivals and daily prayers\",\n        price: \"799.00\",\n        categoryId: 1,\n        stock: 20,\n        images: [\"https://images.unsplash.com/photo-1604486070132-ac0c4b0e6b42?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"],\n        sku: \"BL006\",\n        featured: false,\n      },\n    ];\n\n    defaultProducts.forEach(prod => {\n      const product: Product = { \n        ...prod, \n        id: this.productIdCounter++,\n        createdAt: new Date(),\n      };\n      this.products.set(product.id, product);\n    });\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(cat => cat.slug === slug);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const newCategory: Category = { ...category, id: this.categoryIdCounter++ };\n    this.categories.set(newCategory.id, newCategory);\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const existing = this.categories.get(id);\n    if (!existing) return undefined;\n\n    const updated: Category = { ...existing, ...category };\n    this.categories.set(id, updated);\n    return updated;\n  }\n\n  async deleteCategory(id: number): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  // Products\n  async getProducts(categoryId?: number): Promise<Product[]> {\n    const products = Array.from(this.products.values());\n    if (categoryId) {\n      return products.filter(p => p.categoryId === categoryId);\n    }\n    return products;\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(p => p.featured);\n  }\n\n  async getProductsWithCategory(): Promise<ProductWithCategory[]> {\n    const products = Array.from(this.products.values());\n    return products.map(product => {\n      const category = this.categories.get(product.categoryId);\n      return { ...product, category: category! };\n    });\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductWithCategory(id: number): Promise<ProductWithCategory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const category = this.categories.get(product.categoryId);\n    if (!category) return undefined;\n\n    return { ...product, category };\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.products.values()).filter(product =>\n      product.name.toLowerCase().includes(searchTerm) ||\n      product.description.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const newProduct: Product = { \n      ...product, \n      id: this.productIdCounter++,\n      createdAt: new Date(),\n    };\n    this.products.set(newProduct.id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n\n    const updated: Product = { ...existing, ...product };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Cart\n  async getCartItems(sessionId: string): Promise<CartItemWithProduct[]> {\n    const items = this.cartItems.get(sessionId) || [];\n    return items.map(item => {\n      const product = this.products.get(item.productId);\n      return { ...item, product: product! };\n    }).filter(item => item.product);\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    const sessionItems = this.cartItems.get(cartItem.sessionId) || [];\n    const existingIndex = sessionItems.findIndex(item => item.productId === cartItem.productId);\n\n    if (existingIndex >= 0) {\n      sessionItems[existingIndex].quantity += cartItem.quantity;\n      this.cartItems.set(cartItem.sessionId, sessionItems);\n      return sessionItems[existingIndex];\n    } else {\n      const newItem: CartItem = {\n        ...cartItem,\n        id: this.cartItemIdCounter++,\n        createdAt: new Date(),\n      };\n      sessionItems.push(newItem);\n      this.cartItems.set(cartItem.sessionId, sessionItems);\n      return newItem;\n    }\n  }\n\n  async updateCartItem(sessionId: string, productId: number, quantity: number): Promise<CartItem | undefined> {\n    const sessionItems = this.cartItems.get(sessionId) || [];\n    const itemIndex = sessionItems.findIndex(item => item.productId === productId);\n\n    if (itemIndex >= 0) {\n      if (quantity <= 0) {\n        sessionItems.splice(itemIndex, 1);\n      } else {\n        sessionItems[itemIndex].quantity = quantity;\n      }\n      this.cartItems.set(sessionId, sessionItems);\n      return sessionItems[itemIndex];\n    }\n    return undefined;\n  }\n\n  async removeFromCart(sessionId: string, productId: number): Promise<boolean> {\n    const sessionItems = this.cartItems.get(sessionId) || [];\n    const initialLength = sessionItems.length;\n    const filteredItems = sessionItems.filter(item => item.productId !== productId);\n\n    this.cartItems.set(sessionId, filteredItems);\n    return filteredItems.length < initialLength;\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    this.cartItems.set(sessionId, []);\n    return true;\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const newOrder: Order = {\n      ...order,\n      id: this.orderIdCounter++,\n      createdAt: new Date(),\n    };\n    this.orders.set(newOrder.id, newOrder);\n    return newOrder;\n  }\n\n  async updateOrderStatus(id: number, status: string): Promise<Order | undefined> {\n    const existing = this.orders.get(id);\n    if (!existing) return undefined;\n\n    const updated: Order = { ...existing, status };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  // User management\n  async createUser(userData: InsertUser): Promise<User> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getUserById(id: number): Promise<User | undefined> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async createSession(userId: number): Promise<string> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getSessionUser(sessionId: string): Promise<User | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n  async deleteSession(sessionId: string): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async addToWishlist(userId: number, productId: number): Promise<User | undefined> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async removeFromWishlist(userId: number, productId: number): Promise<User | undefined> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async getWishlist(userId: number): Promise<Product[]> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n\nimport { JsonStorage } from './json-storage';\n\nexport const storage = new JsonStorage();","size_bytes":13995},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/auth-schema.ts":{"content":"\nimport { z } from \"zod\";\n\nexport const registerSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const userSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string(),\n  passwordHash: z.string(),\n  wishlist: z.array(z.number()).default([]), // Array of product IDs\n  createdAt: z.string(),\n});\n\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = Omit<User, \"id\" | \"createdAt\">;\n","size_bytes":1035},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  thumbnail: text(\"thumbnail\"),\n});\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: integer(\"category_id\").notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  images: text(\"images\").array().notNull().default([]),\n  sku: text(\"sku\").notNull().unique(),\n  featured: boolean(\"featured\").notNull().default(false),\n  features: text(\"features\").array().notNull().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: text(\"session_id\").notNull(),\n  productId: integer(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  shippingAddress: text(\"shipping_address\").notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, shipped, delivered, cancelled\n  trackingNumber: text(\"tracking_number\").notNull().unique(),\n  items: text(\"items\").notNull(), // JSON stringified array of order items\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  trackingNumber: true,\n  createdAt: true,\n}).extend({\n  userId: z.number().min(1, \"User ID is required\"),\n});\n\nexport type Category = typeof categories.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n// Additional types for frontend\nexport type ProductWithCategory = Product & { category: Category };\nexport type CartItemWithProduct = CartItem & {\n  product: Product;\n};\n\n// Settings schema for homepage customization\nexport const insertSettingSchema = z.object({\n  key: z.string().min(1, \"Key is required\"),\n  value: z.string(),\n  type: z.enum([\"text\", \"image\", \"boolean\"]).default(\"text\"),\n  description: z.string().optional(),\n});\n\nexport const settingSchema = z.object({\n  id: z.number(),\n  key: z.string(),\n  value: z.string(),\n  type: z.string(),\n  description: z.string().nullable(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type Setting = z.infer<typeof settingSchema>;\n\n// Reviews schema\nexport const insertReviewSchema = z.object({\n  productId: z.number().min(1, \"Product ID is required\"),\n  userId: z.number().min(1, \"User ID is required\"),\n  rating: z.number().min(1).max(5, \"Rating must be between 1 and 5\"),\n  comment: z.string().min(1, \"Comment is required\").max(1000, \"Comment must be less than 1000 characters\"),\n  title: z.string().min(1, \"Title is required\").max(100, \"Title must be less than 100 characters\"),\n});\n\nexport const reviewSchema = z.object({\n  id: z.number(),\n  productId: z.number(),\n  userId: z.number(),\n  rating: z.number(),\n  comment: z.string(),\n  title: z.string(),\n  userName: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Review = z.infer<typeof reviewSchema>;\n\n// Product with review stats\nexport type ProductWithReviews = Product & {\n  reviewStats: {\n    averageRating: number;\n    totalReviews: number;\n    ratingDistribution: { [key: number]: number };\n  };\n};","size_bytes":4746},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navigation } from \"@/components/navigation\";\nimport Home from \"./pages/home\";\nimport Products from \"./pages/products\";\nimport ProductDetail from \"./pages/product-detail\";\nimport Cart from \"./pages/cart\";\nimport Wishlist from \"./pages/wishlist\";\nimport TrackOrder from \"./pages/track-order\";\nimport Profile from \"./pages/profile\";\nimport Admin from \"./pages/admin\";\nimport NotFound from \"./pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/products/:id\" component={ProductDetail} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/wishlist\" component={Wishlist} />\n      <Route path=\"/track\" component={TrackOrder} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/admin/:tab\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-warm-cream\">\n          <Navigation />\n          <main className=\"pt-10\"> {/* Added padding-top equal to nav height */}\n            <Router />\n          </main>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1658},"client/src/index.css":{"content":"/* Google Fonts - Enhanced for Indian aesthetic */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Poppins:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Lora:ital,wght@0,400;0,500;0,600;1,400&family=Cormorant+Garamond:ital,wght@0,300;0,400;0,500;0,600;0,700;1,400&family=Cinzel:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 37 36% 96%; /* #F7F3E9 - warm paper */\n  --foreground: 30 20% 15%; /* #332B24 - dark brown */\n  --muted: 35 25% 90%; /* #F0EAE2 - light beige */\n  --muted-foreground: 30 15% 40%; /* #6B5B50 */\n  --popover: 37 50% 98%; /* #FEFBF6 */\n  --popover-foreground: 30 20% 15%; /* #332B24 */\n  --card: 40 45% 98%; /* #FEFCF7 */\n  --card-foreground: 30 20% 15%; /* #332B24 */\n  --border: 35 20% 85%; /* #E0D5CC */\n  --input: 35 20% 85%; /* #E0D5CC */\n  --primary: 22 69% 50%; /* #D2691E - traditional terracotta */\n  --primary-foreground: 0 0% 100%; /* #FFFFFF */\n  --secondary: 45 60% 90%; /* #F4F0E8 */\n  --secondary-foreground: 30 20% 15%; /* #332B24 */\n  --accent: 39 100% 60%; /* #FF9F00 - vibrant saffron */\n  --accent-foreground: 0 0% 100%; /* #FFFFFF */\n  --destructive: 0 70% 50%; /* #DC2626 */\n  --destructive-foreground: 0 0% 100%; /* #FFFFFF */\n  --ring: 22 69% 50%; /* #D2691E */\n  --radius: 0.75rem;\n\n  /* Enhanced Indian craft colors */\n  --terracotta: 22 69% 50%; /* #D2691E - traditional clay */\n  --saffron: 39 100% 60%; /* #FF9F00 - sacred saffron */\n  --turmeric: 45 95% 55%; /* #F5D920 - turmeric yellow */\n  --henna: 15 60% 35%; /* #8B4513 - henna brown */\n  --indigo: 240 100% 25%; /* #000080 - traditional indigo */\n  --vermillion: 14 100% 50%; /* #FF4500 - vermillion red */\n  --peacock: 180 100% 25%; /* #008080 - peacock green */\n  --marigold: 40 100% 50%; /* #FFA500 - marigold orange */\n  --lotus: 330 100% 85%; /* #FFCCCB - lotus pink */\n  --sandalwood: 30 30% 70%; /* #D2B48C - sandalwood beige */\n  --ivory: 60 20% 95%; /* #F5F5DC - ivory white */\n  --copper: 30 60% 40%; /* #B87333 - copper bronze */\n  --golden: 45 100% 50%; /* #FFD700 - golden yellow */\n  --antique-gold: 43 74% 49%; /* #DAA520 - antique gold */\n  \n  /* Background variations */\n  --warm-cream: 37 36% 96%; /* #F7F3E9 */\n  --soft-beige: 35 25% 90%; /* #F0EAE2 */\n  --paper-texture: 40 30% 94%; /* #F2EDE6 */\n}\n\n.dark {\n  --background: 222 84% 5%; /* #0A0A0A */\n  --foreground: 0 0% 98%; /* #FAFAFA */\n  --muted: 217 33% 17%; /* #1F2937 */\n  --muted-foreground: 215 20% 65%; /* #9CA3AF */\n  --popover: 222 84% 5%; /* #0A0A0A */\n  --popover-foreground: 0 0% 98%; /* #FAFAFA */\n  --card: 222 84% 5%; /* #0A0A0A */\n  --card-foreground: 0 0% 98%; /* #FAFAFA */\n  --border: 217 33% 17%; /* #1F2937 */\n  --input: 217 33% 17%; /* #1F2937 */\n  --primary: 25 62% 47%; /* #D2691E - terracotta */\n  --primary-foreground: 0 0% 100%; /* #FFFFFF */\n  --secondary: 217 33% 17%; /* #1F2937 */\n  --secondary-foreground: 0 0% 98%; /* #FAFAFA */\n  --accent: 36 100% 58%; /* #FF9933 - saffron */\n  --accent-foreground: 0 0% 100%; /* #FFFFFF */\n  --destructive: 0 63% 31%; /* #7F1D1D */\n  --destructive-foreground: 0 0% 98%; /* #FAFAFA */\n  --ring: 25 62% 47%; /* #D2691E - terracotta */\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  /* Traditional Indian color utilities */\n  .text-terracotta {\n    color: hsl(var(--terracotta));\n  }\n\n  .bg-terracotta {\n    background-color: hsl(var(--terracotta));\n  }\n\n  .border-terracotta {\n    border-color: hsl(var(--terracotta));\n  }\n\n  .text-saffron {\n    color: hsl(var(--saffron));\n  }\n\n  .bg-saffron {\n    background-color: hsl(var(--saffron));\n  }\n\n  .border-saffron {\n    border-color: hsl(var(--saffron));\n  }\n\n  .text-turmeric {\n    color: hsl(var(--turmeric));\n  }\n\n  .bg-turmeric {\n    background-color: hsl(var(--turmeric));\n  }\n\n  .text-henna {\n    color: hsl(var(--henna));\n  }\n\n  .bg-henna {\n    background-color: hsl(var(--henna));\n  }\n\n  .text-indigo {\n    color: hsl(var(--indigo));\n  }\n\n  .bg-indigo {\n    background-color: hsl(var(--indigo));\n  }\n\n  .text-vermillion {\n    color: hsl(var(--vermillion));\n  }\n\n  .bg-vermillion {\n    background-color: hsl(var(--vermillion));\n  }\n\n  .text-peacock {\n    color: hsl(var(--peacock));\n  }\n\n  .bg-peacock {\n    background-color: hsl(var(--peacock));\n  }\n\n  .text-marigold {\n    color: hsl(var(--marigold));\n  }\n\n  .bg-marigold {\n    background-color: hsl(var(--marigold));\n  }\n\n  .text-lotus {\n    color: hsl(var(--lotus));\n  }\n\n  .bg-lotus {\n    background-color: hsl(var(--lotus));\n  }\n\n  .text-sandalwood {\n    color: hsl(var(--sandalwood));\n  }\n\n  .bg-sandalwood {\n    background-color: hsl(var(--sandalwood));\n  }\n\n  .text-copper {\n    color: hsl(var(--copper));\n  }\n\n  .bg-copper {\n    background-color: hsl(var(--copper));\n  }\n\n  .text-golden {\n    color: hsl(var(--golden));\n  }\n\n  .bg-golden {\n    background-color: hsl(var(--golden));\n  }\n\n  .border-golden {\n    border-color: hsl(var(--golden));\n  }\n\n  .text-antique-gold {\n    color: hsl(var(--antique-gold));\n  }\n\n  .bg-antique-gold {\n    background-color: hsl(var(--antique-gold));\n  }\n\n  .border-antique-gold {\n    border-color: hsl(var(--antique-gold));\n  }\n\n  .bg-warm-cream {\n    background-color: hsl(var(--warm-cream));\n  }\n\n  .bg-soft-beige {\n    background-color: hsl(var(--soft-beige));\n  }\n\n  .bg-paper-texture {\n    background-color: hsl(var(--paper-texture));\n  }\n\n  /* Enhanced typography for Indian aesthetic */\n  .font-display {\n    font-family: 'Cinzel', serif;\n  }\n\n  .font-serif {\n    font-family: 'Cormorant Garamond', serif;\n  }\n\n  .font-playfair {\n    font-family: 'Playfair Display', serif;\n  }\n\n  /* Text shadow utilities for better visibility */\n  .text-shadow-lg {\n    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  }\n  \n  .text-shadow-md {\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  }\n\n  .font-poppins {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  .font-crimson {\n    font-family: 'Crimson Text', serif;\n  }\n\n  .font-lora {\n    font-family: 'Lora', serif;\n  }\n\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n\n  /* Indian-inspired decorative elements */\n  .mandala-border {\n    border-image: radial-gradient(circle, hsl(var(--saffron)), hsl(var(--terracotta))) 1;\n  }\n\n  .paisley-pattern {\n    background-image: radial-gradient(circle at 25% 25%, hsl(var(--saffron) / 0.1) 0%, transparent 50%),\n                      radial-gradient(circle at 75% 75%, hsl(var(--terracotta) / 0.1) 0%, transparent 50%);\n  }\n\n  .heritage-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--saffron)) 0%, \n      hsl(var(--marigold)) 25%, \n      hsl(var(--terracotta)) 50%, \n      hsl(var(--henna)) 75%, \n      hsl(var(--copper)) 100%);\n  }\n\n  .traditional-shadow {\n    box-shadow: 0 4px 20px hsl(var(--henna) / 0.2), \n                0 8px 40px hsl(var(--terracotta) / 0.1);\n  }\n\n  .craft-border {\n    border: 2px solid hsl(var(--terracotta));\n    border-radius: 0.5rem;\n    background: linear-gradient(45deg, \n      hsl(var(--warm-cream)), \n      hsl(var(--soft-beige)));\n  }\n}\n\n/* Custom scrollbar styles */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 8px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: #f1f5f9;\n  border-radius: 4px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 4px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n/* For Firefox */\n.custom-scrollbar {\n  scrollbar-width: thin;\n  scrollbar-color: #cbd5e1 #f1f5f9;\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.hide-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n\n/* Hide scrollbar for IE, Edge and Firefox */\n.hide-scrollbar {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n/* Image zoom effect */\n.image-zoom {\n  transition: transform 0.3s ease;\n}\n\n.image-zoom:hover {\n  transform: scale(1.05);\n}\n\n/* Smooth fade animation */\n.fade-in {\n  animation: fadeIn 0.5s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Loading spinner */\n.spinner {\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #3498db;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Hover effects for buttons */\n.btn-hover:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n/* Gradient backgrounds */\n.gradient-bg {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Custom animations */\n.slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.bounce {\n  animation: bounce 0.6s;\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: translate3d(0,0,0);\n  }\n  40%, 43% {\n    transform: translate3d(0,-15px,0);\n  }\n  70% {\n    transform: translate3d(0,-7px,0);\n  }\n  90% {\n    transform: translate3d(0,-2px,0);\n  }\n}\n\n/* Apply the warm cream background to the body by default with subtle pattern */\nbody {\n  background-color: hsl(var(--warm-cream));\n  background-image: \n    radial-gradient(circle at 20% 50%, hsl(var(--saffron) / 0.03) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, hsl(var(--terracotta) / 0.03) 0%, transparent 50%),\n    radial-gradient(circle at 40% 80%, hsl(var(--turmeric) / 0.02) 0%, transparent 50%);\n  background-size: 400px 400px, 350px 350px, 300px 300px;\n  background-position: 0 0, 40px 60px, 130px 270px;\n}\n\n/* Traditional Indian decorative patterns */\n.ethnic-pattern {\n  background-image: \n    repeating-linear-gradient(45deg, transparent, transparent 2px, hsl(var(--terracotta) / 0.05) 2px, hsl(var(--terracotta) / 0.05) 4px),\n    repeating-linear-gradient(-45deg, transparent, transparent 2px, hsl(var(--saffron) / 0.05) 2px, hsl(var(--saffron) / 0.05) 4px);\n}\n\n.mandala-overlay {\n  position: relative;\n}\n\n.mandala-overlay::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: \n    radial-gradient(circle at center, transparent 30%, hsl(var(--saffron) / 0.1) 31%, hsl(var(--saffron) / 0.1) 32%, transparent 33%),\n    radial-gradient(circle at center, transparent 50%, hsl(var(--terracotta) / 0.05) 51%, hsl(var(--terracotta) / 0.05) 52%, transparent 53%);\n  pointer-events: none;\n}\n\n/* Fullscreen modal styles */\n[data-state=\"open\"] .fullscreen-modal {\n  position: fixed;\n  inset: 0;\n  z-index: 9999;\n}\n\n/* Hide scrollbar for fullscreen thumbnail navigation */\n.fullscreen-thumbnails {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n.fullscreen-thumbnails::-webkit-scrollbar {\n  display: none;\n}\n\n/* Enhanced scrollbar hiding for horizontal scroll */\n.scrollbar-hide {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Custom animations */\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fade-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slide-in-right {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes bounce-in {\n  0% {\n    opacity: 0;\n    transform: scale(0.3);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  70% {\n    opacity: 1;\n    transform: scale(0.9);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.6s ease-out;\n}\n\n.animate-fade-in-up {\n  animation: fade-in-up 0.8s ease-out;\n}\n\n.animate-slide-in-right {\n  animation: slide-in-right 0.6s ease-out;\n}\n\n.animate-bounce-in {\n  animation: bounce-in 0.8s ease-out;\n}\n\n.animate-shimmer {\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n  background-size: 200% 100%;\n  animation: shimmer 2s infinite;\n}\n\n/* Hover effects */\n.hover-lift {\n  transition: all 0.3s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n}\n\n/* Glass morphism effect */\n.glass {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, #8B4513, #D2691E, #CD853F);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Custom border styles */\n.border-3 {\n  border-width: 3px;\n}\n\n/* Responsive fullscreen image container */\n.fullscreen-image-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  padding: 1rem;\n}\n\n@media (min-width: 640px) {\n  .fullscreen-image-container {\n    padding: 2rem;\n  }\n}\n\n/* Prevent image overflow in fullscreen */\n.fullscreen-image {\n  max-width: 95vw;\n  max-height: 80vh;\n  width: auto;\n  height: auto;\n  object-fit: contain;\n}\n\n@media (min-width: 640px) {\n  .fullscreen-image {\n    max-width: 90vw;\n    max-height: 85vh;\n  }\n}\n\n/* Zoom lens styles */\n.zoom-lens {\n  border: 2px solid rgba(255, 255, 255, 0.8);\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2), 0 4px 12px rgba(0, 0, 0, 0.15);\n  backdrop-filter: blur(1px);\n}\n\n/* Custom cursor for zoom area */\n.cursor-zoom {\n  cursor: zoom-in;\n}\n\n.cursor-zoom:hover {\n  cursor: crosshair;\n}\n\n/* Smooth zoom transition */\n.zoom-image {\n  transition: transform 0.1s ease-out;\n  transform-origin: center;\n  will-change: transform;\n}\n\n/* Disable text selection during zoom */\n.zoom-container * {\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n/* Mobile-specific optimizations */\n@media (max-width: 640px) {\n  /* Ensure minimum touch target size */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Improve button spacing on mobile */\n  .mobile-button-spacing {\n    margin: 0.25rem;\n    padding: 0.75rem 1rem;\n  }\n  \n  /* Better text readability on mobile */\n  .mobile-text {\n    line-height: 1.6;\n    font-size: 1rem;\n  }\n  \n  /* Reduce margins for mobile */\n  .mobile-spacing {\n    margin: 0.5rem 0;\n  }\n  \n  /* Hide elements that take up too much space on mobile */\n  .desktop-only {\n    display: none !important;\n  }\n}\n\n/* Extra small screens */\n@media (max-width: 375px) {\n  /* Further reduce text sizes for very small screens */\n  .text-xs { font-size: 0.7rem; }\n  .text-sm { font-size: 0.8rem; }\n  .text-base { font-size: 0.9rem; }\n  \n  /* Reduce padding */\n  .px-4 { padding-left: 0.75rem; padding-right: 0.75rem; }\n  .py-4 { padding-top: 0.75rem; padding-bottom: 0.75rem; }\n}\n\n/* Improve scroll performance on mobile */\n.mobile-scroll {\n  -webkit-overflow-scrolling: touch;\n  scroll-behavior: smooth;\n}\n\n/* Better form inputs on mobile */\n@media (max-width: 640px) {\n  input[type=\"text\"],\n  input[type=\"email\"],\n  input[type=\"password\"],\n  textarea,\n  select {\n    font-size: 16px; /* Prevents zoom on iOS */\n    padding: 0.75rem;\n  }\n}","size_bytes":15669},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Search, ShoppingCart, Menu, X, Settings, User, LogOut, Package, Heart } from \"lucide-react\";\nimport logoImage from \"@assets/SNEHA LOGO 1.png\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ShoppingCartSidebar } from \"./shopping-cart\";\nimport { AuthDialog } from \"./auth/auth-dialog\";\n\nconst categories = [\n  { name: \"Premium\", slug: \"premium\" },\n  { name: \"Roasted\", slug: \"roasted\" },\n  { name: \"Natural\", slug: \"natural\" },\n  { name: \"Flavored\", slug: \"flavored\" },\n];\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [showAuthDialog, setShowAuthDialog] = useState(false);\n  const { itemCount } = useCart();\n  const { user, isAuthenticated, login, logout } = useAuth();\n  const { toast } = useToast();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      window.location.href = `/products?search=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"bg-warm-cream border-b-2 border-terracotta/20 traditional-shadow sticky top-0 z-50 ethnic-pattern\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center group\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 bg-heritage-gradient rounded-lg flex items-center justify-center traditional-shadow overflow-hidden\">\n                  <img \n                    src={logoImage} \n                    alt=\"Hastkala Logo\" \n                    className=\"w-full h-full object-contain p-1\"\n                  />\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-display text-lg sm:text-xl md:text-2xl font-bold text-henna group-hover:text-terracotta transition-colors\">\n                    Makhana\n                  </span>\n                  <span className=\"text-xs sm:text-sm text-copper font-serif italic hidden sm:inline\">\n                    Premium Makhana\n                  </span>\n                </div>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/\" className={`font-serif text-henna hover:text-terracotta transition-colors ${location === \"/\" ? \"text-terracotta font-semibold\" : \"\"}`}>\n                Home\n              </Link>\n\n              <NavigationMenu>\n                <NavigationMenuList>\n                  <NavigationMenuItem>\n                    <NavigationMenuTrigger className=\"font-serif text-henna hover:text-terracotta transition-colors\">\n                      Categories\n                    </NavigationMenuTrigger>\n                    <NavigationMenuContent>\n                      <div className=\"w-48 p-2 bg-warm-cream border border-terracotta/20\">\n                        {categories.map((category) => (\n                          <Link\n                            key={category.slug}\n                            href={`/products?category=${category.slug}`}\n                            className=\"block px-4 py-2 text-henna hover:bg-saffron/10 hover:text-terracotta rounded-md font-serif transition-colors\"\n                          >\n                            {category.name}\n                          </Link>\n                        ))}\n                      </div>\n                    </NavigationMenuContent>\n                  </NavigationMenuItem>\n                </NavigationMenuList>\n              </NavigationMenu>\n\n              <Link href=\"/products\" className={`font-serif text-henna hover:text-terracotta transition-colors ${location === \"/products\" ? \"text-terracotta font-semibold\" : \"\"}`}>\n                Products\n              </Link>\n\n              <Link href=\"/track\" className={`font-serif text-henna hover:text-terracotta transition-colors ${location === \"/track\" ? \"text-terracotta font-semibold\" : \"\"}`}>\n                Track Order\n              </Link>\n            </div>\n\n            {/* Search and Actions */}\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              {/* Search - Desktop only */}\n              <form onSubmit={handleSearch} className=\"relative hidden lg:block\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search makhana...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-48 xl:w-64 pr-10\"\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"absolute right-0 top-0 h-full px-3\"\n                >\n                  <Search className=\"h-4 w-4\" />\n                </Button>\n              </form>\n\n              {/* Mobile Search Button */}\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"lg:hidden hover:bg-warm-cream/50 p-1.5 sm:p-2\"\n                onClick={() => window.location.href = '/products'}\n              >\n                <Search className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              </Button>\n\n              <Link href=\"/wishlist\" className=\"relative hidden sm:block\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative hover:bg-warm-cream/50 p-1.5 sm:p-2\">\n                  <Heart className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                </Button>\n              </Link>\n\n              <Link href=\"/cart\" className=\"relative\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative hover:bg-warm-cream/50 p-1.5 sm:p-2\">\n                  <ShoppingCart className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  {itemCount > 0 && (\n                    <Badge className=\"absolute -top-0.5 -right-0.5 h-3.5 w-3.5 sm:h-5 sm:w-5 flex items-center justify-center p-0 bg-saffron text-white text-xs\">\n                      {itemCount}\n                    </Badge>\n                  )}\n                </Button>\n              </Link>\n\n              {/* Authentication */}\n              {isAuthenticated ? (\n                <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                  <span className=\"text-xs sm:text-sm text-gray-700 hidden sm:block\">Hello, {user?.name}</span>\n                  <Link href=\"/profile\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-terracotta hover:bg-terracotta/10 p-1 sm:p-2\"\n                    >\n                      <User className=\"h-3 w-3 sm:h-4 sm:w-4 sm:mr-2\" />\n                      <span className=\"hidden sm:inline\">Profile</span>\n                    </Button>\n                  </Link>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"bg-terracotta text-white border-terracotta hover:bg-terracotta/90 p-1 sm:p-2\"\n                    onClick={logout}\n                  >\n                    <LogOut className=\"h-3 w-3 sm:h-4 sm:w-4 sm:mr-2\" />\n                    <span className=\"hidden sm:inline\">Logout</span>\n                  </Button>\n                </div>\n              ) : (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"bg-terracotta text-white border-terracotta hover:bg-terracotta/90 p-1 sm:p-2 text-xs sm:text-sm\"\n                  onClick={() => setShowAuthDialog(true)}\n                >\n                  <User className=\"h-3 w-3 sm:h-4 w-4 sm:mr-2\" />\n                  <span className=\"hidden xs:inline\">Login</span>\n                </Button>\n              )}\n\n              {/* Mobile Menu */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden p-1.5\">\n                    <Menu className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-80\">\n                  <div className=\"flex flex-col space-y-4 mt-8\">\n                    <Link href=\"/\" className=\"text-lg font-medium\">Home</Link>\n                    <div>\n                      <h3 className=\"text-lg font-medium mb-2\">Categories</h3>\n                      <div className=\"pl-4 space-y-2\">\n                        {categories.map((category) => (\n                          <Link\n                            key={category.slug}\n                            href={`/products?category=${category.slug}`}\n                            className=\"block text-gray-700 hover:text-terracotta\"\n                          >\n                            {category.name}\n                          </Link>\n                        ))}\n                      </div>\n                    </div>\n                    <Link href=\"/products\" className=\"text-lg font-medium\">Products</Link>\n                    <Link href=\"/track\" className=\"text-lg font-medium\">Track Order</Link>\n\n                    {/* Mobile Search */}\n                    <form onSubmit={handleSearch} className=\"relative sm:hidden\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search makhana...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pr-10\"\n                      />\n                      <Button\n                        type=\"submit\"\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                      >\n                        <Search className=\"h-4 w-4\" />\n                      </Button>\n                    </form>\n\n                     <Link href=\"/wishlist\" className=\"relative\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"relative hover:bg-warm-cream/50\">\n                        <Heart className=\"h-5 w-5\" />\n                      </Button>\n                    </Link>\n\n                    {/* Mobile Authentication */}\n                    {isAuthenticated ? (\n                      <div className=\"pt-4 border-t space-y-2\">\n                        <p className=\"text-sm text-gray-600 mb-2\">Hello, {user?.name}</p>\n                        <Link href=\"/profile\">\n                          <Button \n                            variant=\"ghost\" \n                            className=\"w-full justify-start text-terracotta hover:bg-terracotta/10\"\n                          >\n                            <User className=\"h-4 w-4 mr-2\" />\n                            My Profile\n                          </Button>\n                        </Link>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full bg-terracotta text-white border-terracotta hover:bg-terracotta/90\"\n                          onClick={logout}\n                        >\n                          <LogOut className=\"h-4 w-4 mr-2\" />\n                          Logout\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"pt-4 border-t\">\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full bg-terracotta text-white border-terracotta hover:bg-terracotta/90\"\n                          onClick={() => setShowAuthDialog(true)}\n                        >\n                          <User className=\"h-4 w-4 mr-2\" />\n                          Login\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <ShoppingCartSidebar isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />\n\n      <AuthDialog\n        open={showAuthDialog}\n        onOpenChange={setShowAuthDialog}\n        onSuccess={(userData, sessionId) => {\n          login(userData, sessionId);\n          toast({\n            title: \"Success!\",\n            description: \"You have been logged in successfully.\",\n          });\n        }}\n      />\n    </>\n  );\n}","size_bytes":13086},"client/src/components/product-card.tsx":{"content":"import { ShoppingCart, Heart } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product, ProductWithCategory } from \"@shared/schema\";\nimport { Star } from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: Product | ProductWithCategory;\n  showCategory?: boolean;\n  highlightFeatures?: string[];\n}\n\nexport function ProductCard({ \n  product, \n  showCategory = true,\n  highlightFeatures = [] \n}: ProductCardProps) {\n  const { addToCart, isAddingToCart } = useCart();\n  const { isInWishlist, toggleWishlist } = useWishlist();\n  const { toast } = useToast();\n\n  // Fetch review stats\n  // const { data: reviewStats } = useQuery({\n  //   queryKey: [\"/api/products\", product.id, \"review-stats\"],\n  //   queryFn: () => getProductReviewStats(product.id),\n  // });\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (product.stock <= 0) return;\n\n    addToCart({\n      productId: product.id,\n      quantity: 1,\n    });\n\n    toast({\n      title: \"Added to cart\",\n      description: `${product.name} added to your cart.`,\n    });\n  };\n\n  const handleWishlistToggle = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    toggleWishlist(product.id);\n  };\n\n  const category = 'category' in product ? product.category : null;\n  const productFeatures = product.features || [];\n  const matchingFeatures = highlightFeatures.length > 0 \n    ? productFeatures.filter(feature => \n        highlightFeatures.some(highlight => \n          feature.toLowerCase().includes(highlight.toLowerCase()) ||\n          highlight.toLowerCase().includes(feature.toLowerCase())\n        )\n      ).slice(0, 2)\n    : productFeatures.slice(0, 2);\n\n  return (\n    <Link href={`/products/${product.id}`}>\n      <Card className=\"group cursor-pointer transition-all duration-300 traditional-shadow hover:scale-105 craft-border h-full flex flex-col bg-gradient-to-br from-warm-cream to-sandalwood/10 paisley-pattern\">\n        <div className=\"relative aspect-[4/3] sm:aspect-[4/5] overflow-hidden rounded-t-lg\">\n          {/* Product Image */}\n          <img\n            src={product.images[0] || \"/placeholder-image.jpg\"}\n            alt={product.name}\n            className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n          />\n\n          {/* Traditional Badges */}\n          <div className=\"absolute top-2 sm:top-3 left-2 sm:left-3 flex flex-col space-y-1 sm:space-y-2\">\n            {product.featured && (\n              <Badge className=\"bg-saffron/90 text-white text-xs font-serif traditional-shadow\">\n                ⭐ Featured\n              </Badge>\n            )}\n            {product.stock === 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs font-serif\">\n                Out of Stock\n              </Badge>\n            )}\n            {product.stock > 0 && product.stock <= 5 && (\n              <Badge variant=\"outline\" className=\"text-vermillion border-vermillion bg-warm-cream text-xs font-serif\">\n                Limited Stock\n              </Badge>\n            )}\n          </div>\n\n          {/* Traditional Add to Cart Button */}\n          {product.stock > 0 && (\n            <div className=\"absolute bottom-2 sm:bottom-3 right-2 sm:right-3 sm:opacity-0 sm:group-hover:opacity-100 transition-opacity duration-300\">\n              <Button\n                size=\"sm\"\n                onClick={handleAddToCart}\n                disabled={isAddingToCart}\n                className=\"heritage-gradient hover:opacity-90 text-white traditional-shadow h-8 w-8 sm:h-9 sm:w-9 p-0 rounded-full\"\n              >\n                <ShoppingCart className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <CardContent className=\"p-2 sm:p-4 flex-1 flex flex-col bg-gradient-to-br from-warm-cream to-soft-beige/50\">\n          <div className=\"space-y-1 sm:space-y-2 flex-1\">\n            <div className=\"flex items-center justify-between\">\n              {showCategory && category && (\n                <Badge variant=\"outline\" className=\"text-xs hidden sm:block bg-terracotta/10 text-henna border-terracotta/30 font-serif\">\n                  {category.name}\n                </Badge>\n              )}\n              <div className=\"flex items-center space-x-1\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"h-2.5 w-2.5 sm:h-3 sm:w-3 fill-saffron text-saffron\" />\n                ))}\n                <span className=\"text-xs text-copper ml-1 hidden sm:inline font-serif\">4.8</span>\n              </div>\n            </div>\n\n            <h3 className=\"font-serif font-semibold text-henna line-clamp-2 min-h-[1.5rem] sm:min-h-[2.5rem] text-xs sm:text-base leading-tight\">\n              {product.name}\n            </h3>\n\n            <p className=\"text-xs sm:text-sm text-copper/80 line-clamp-1 sm:line-clamp-2 min-h-[1rem] sm:min-h-[2.5rem] leading-tight font-serif\">\n              {product.description}\n            </p>\n\n            {/* Traditional Features */}\n            {matchingFeatures.length > 0 && (\n              <div className=\"space-y-1 hidden sm:block\">\n                <div className=\"text-xs text-henna font-serif\">Features:</div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {matchingFeatures.map((feature, index) => (\n                    <Badge \n                      key={index} \n                      variant=\"secondary\" \n                      className={`text-xs font-serif ${\n                        highlightFeatures.some(h => \n                          feature.toLowerCase().includes(h.toLowerCase()) ||\n                          h.toLowerCase().includes(feature.toLowerCase())\n                        ) ? 'bg-saffron/20 text-saffron border-saffron' : 'bg-sandalwood/20 text-henna border-terracotta/20'\n                      }`}\n                    >\n                      {feature}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-between pt-2 sm:pt-3 mt-auto bg-saffron/10 rounded-lg p-2 craft-border\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between w-full\">\n              <span className=\"text-sm sm:text-lg font-bold text-terracotta font-serif\">\n                ₹{parseFloat(product.price).toLocaleString()}\n              </span>\n              \n              <div className=\"flex items-center justify-between sm:justify-end space-x-1 sm:space-x-2 mt-1 sm:mt-0\">\n                <div className=\"text-xs text-copper hidden sm:block font-serif\">\n                  {product.stock > 0 ? `${product.stock} available` : 'Out of stock'}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    toggleWishlist(product.id);\n                  }}\n                  className={`p-1 sm:p-2 transition-colors h-6 w-6 sm:h-8 sm:w-8 rounded-full traditional-shadow ${\n                    isInWishlist(product.id) \n                      ? \"bg-vermillion/20 text-vermillion hover:bg-vermillion/30\" \n                      : \"hover:bg-lotus/30 text-henna hover:text-vermillion\"\n                  }`}\n                  aria-label={isInWishlist(product.id) ? \"Remove from wishlist\" : \"Add to wishlist\"}\n                >\n                  <Heart className={`h-2.5 w-2.5 sm:h-4 sm:w-4 ${isInWishlist(product.id) ? \"fill-current\" : \"\"}`} />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}","size_bytes":8077},"client/src/components/reviews.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Star, Edit, Trash2, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getProductReviews, getProductReviewStats, createReview, deleteReview } from \"@/lib/api\";\n\ninterface ReviewsProps {\n  productId: number;\n}\n\ninterface ReviewFormData {\n  rating: number;\n  title: string;\n  comment: string;\n}\n\ninterface Review {\n  id: number;\n  userId: number;\n  userName: string;\n  rating: number;\n  title: string;\n  comment: string;\n  createdAt: string;\n}\n\ninterface ReviewStats {\n  averageRating: number;\n  totalReviews: number;\n  ratingDistribution: { [key: number]: number };\n}\n\nexport function Reviews({ productId }: ReviewsProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [isReviewDialogOpen, setIsReviewDialogOpen] = useState(false);\n  const [reviewForm, setReviewForm] = useState<ReviewFormData>({\n    rating: 5,\n    title: \"\",\n    comment: \"\",\n  });\n\n  const queryClient = useQueryClient();\n\n  const { data: reviews = [], isLoading: reviewsLoading } = useQuery({\n    queryKey: [\"/api/products\", productId, \"reviews\"],\n    queryFn: () => getProductReviews(productId),\n  });\n\n  const { data: reviewStats } = useQuery<ReviewStats>({\n    queryKey: [\"/api/products\", productId, \"review-stats\"],\n    queryFn: () => getProductReviewStats(productId),\n  });\n\n  const createReviewMutation = useMutation({\n    mutationFn: (data: ReviewFormData) => createReview(productId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId, \"review-stats\"] });\n      setIsReviewDialogOpen(false);\n      setReviewForm({ rating: 5, title: \"\", comment: \"\" });\n      toast({\n        title: \"Review Submitted\",\n        description: \"Thank you for your review!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteReviewMutation = useMutation({\n    mutationFn: (reviewId: number) => deleteReview(reviewId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId, \"review-stats\"] });\n      toast({\n        title: \"Review Deleted\",\n        description: \"Your review has been deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const renderStars = (rating: number, interactive = false, onRatingChange?: (rating: number) => void) => {\n    return (\n      <div className=\"flex space-x-0.5\">\n        {[...Array(5)].map((_, i) => (\n          <button\n            key={i}\n            type={interactive ? \"button\" : undefined}\n            onClick={interactive ? () => onRatingChange?.(i + 1) : undefined}\n            className={interactive ? \"cursor-pointer focus:outline-none\" : undefined}\n          >\n            <Star className={`h-4 w-4 ${\n              i < rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n            }`} />\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const handleSubmitReview = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!reviewForm.title.trim() || !reviewForm.comment.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createReviewMutation.mutate(reviewForm);\n  };\n\n  const userHasReviewed = user && reviews.some((review: Review) => review.userId === user.id);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Review Stats */}\n      {reviewStats && reviewStats.totalReviews > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3 sm:pb-6\">\n            <h3 className=\"font-semibold text-base sm:text-lg\">Customer Reviews</h3>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-6\">\n              {/* Overall Rating */}\n              <div className=\"text-center\">\n                <div className=\"text-2xl sm:text-4xl font-bold text-gray-900 mb-1 sm:mb-2\">\n                  {reviewStats.averageRating.toFixed(1)}\n                </div>\n                <div className=\"flex justify-center mb-1 sm:mb-2\">\n                  <div className=\"flex space-x-0.5\">\n                    {renderStars(Math.round(reviewStats.averageRating))}\n                  </div>\n                </div>\n                <p className=\"text-gray-600 text-xs sm:text-sm\">\n                  Based on {reviewStats.totalReviews} {reviewStats.totalReviews === 1 ? 'review' : 'reviews'}\n                </p>\n              </div>\n\n              {/* Rating Distribution */}\n              <div className=\"space-y-1 sm:space-y-2\">\n                {[5, 4, 3, 2, 1].map((rating) => (\n                  <div key={rating} className=\"flex items-center space-x-2 sm:space-x-3\">\n                    <div className=\"flex items-center space-x-1 w-10 sm:w-16\">\n                      <span className=\"text-xs sm:text-sm\">{rating}</span>\n                      <Star className=\"h-3 w-3 sm:h-4 sm:w-4 fill-yellow-400 text-yellow-400\" />\n                    </div>\n                    <Progress\n                      value={(reviewStats.ratingDistribution[rating] / reviewStats.totalReviews) * 100}\n                      className=\"flex-1 h-1.5 sm:h-2\"\n                    />\n                    <span className=\"text-xs sm:text-sm text-gray-600 w-4 sm:w-8\">\n                      {reviewStats.ratingDistribution[rating]}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Write Review Button */}\n      {isAuthenticated && !userHasReviewed && (\n        <div className=\"text-center\">\n          <Button\n            onClick={() => setIsReviewDialogOpen(true)}\n            className=\"bg-terracotta hover:bg-terracotta/90 text-sm sm:text-base px-3 sm:px-4 py-2\"\n            size=\"sm\"\n          >\n            <MessageSquare className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Write a Review</span>\n            <span className=\"sm:hidden\">Review</span>\n          </Button>\n        </div>\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-3 sm:space-y-4\">\n        <h3 className=\"font-semibold text-base sm:text-lg\">\n          Reviews ({reviews.length})\n        </h3>\n\n        {reviewsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : reviews.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6 text-center py-12\">\n              <MessageSquare className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">No reviews yet. Be the first to review this product!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-2 sm:space-y-4\">\n            {reviews.map((review: Review) => (\n              <Card key={review.id}>\n                <CardContent className=\"pt-3 sm:pt-6 pb-3 sm:pb-6\">\n                  <div className=\"flex items-start justify-between mb-2 sm:mb-4\">\n                    <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                      <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10 bg-terracotta text-white\">\n                        <span className=\"text-xs sm:text-sm font-semibold\">\n                          {review.userName.charAt(0).toUpperCase()}\n                        </span>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium text-sm sm:text-base\">{review.userName}</p>\n                        <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                          <div className=\"flex space-x-0.5\">\n                            {renderStars(review.rating)}\n                          </div>\n                          <span className=\"text-xs sm:text-sm text-gray-500\">\n                            {new Date(review.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    {user && user.id === review.userId && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteReviewMutation.mutate(review.id)}\n                        className=\"text-red-600 hover:text-red-700 h-6 w-6 sm:h-8 sm:w-8 p-0\"\n                      >\n                        <Trash2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                  <h4 className=\"font-semibold mb-1 sm:mb-2 text-sm sm:text-base\">{review.title}</h4>\n                  <p className=\"text-gray-700 leading-relaxed text-sm sm:text-base\">{review.comment}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Review Dialog */}\n      <Dialog open={isReviewDialogOpen} onOpenChange={setIsReviewDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Write a Review</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitReview} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Rating</label>\n              {renderStars(reviewForm.rating, true, (rating) =>\n                setReviewForm({ ...reviewForm, rating })\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Title</label>\n              <Input\n                value={reviewForm.title}\n                onChange={(e) => setReviewForm({ ...reviewForm, title: e.target.value })}\n                placeholder=\"Sum up your review in a few words\"\n                maxLength={100}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Review</label>\n              <Textarea\n                value={reviewForm.comment}\n                onChange={(e) => setReviewForm({ ...reviewForm, comment: e.target.value })}\n                placeholder=\"Share your thoughts about this product\"\n                rows={4}\n                maxLength={1000}\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {reviewForm.comment.length}/1000 characters\n              </p>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsReviewDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createReviewMutation.isPending}\n                className=\"bg-terracotta hover:bg-terracotta/90\"\n              >\n                {createReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12575},"client/src/components/shopping-cart.tsx":{"content":"import { Minus, Plus, X, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { Link } from \"wouter\";\n\ninterface ShoppingCartSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ShoppingCartSidebar({ isOpen, onClose }: ShoppingCartSidebarProps) {\n  const { cartItems, total, updateItem, removeItem, isUpdating, isRemoving } = useCart();\n\n  const handleQuantityChange = (productId: number, newQuantity: number) => {\n    if (newQuantity < 1) {\n      removeItem(productId);\n    } else {\n      updateItem({ productId, quantity: newQuantity });\n    }\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-96 sm:w-[540px]\">\n        <SheetHeader>\n          <SheetTitle className=\"flex items-center justify-between\">\n            Shopping Cart\n            <Badge variant=\"secondary\">\n              {cartItems.length} {cartItems.length === 1 ? \"item\" : \"items\"}\n            </Badge>\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex flex-col h-full\">\n          {/* Cart Items */}\n          <div className=\"flex-1 overflow-y-auto py-4\">\n            {cartItems.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n                <div className=\"text-gray-400 mb-4\">\n                  <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5-6m0 0L5.4 5M7 13h10m0 0v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6z\" />\n                  </svg>\n                </div>\n                <p className=\"text-gray-500 mb-4\">Your cart is empty</p>\n                <Link href=\"/products\" onClick={onClose}>\n                  <Button className=\"bg-terracotta hover:bg-terracotta/90\">\n                    Start Shopping\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {cartItems.map((item) => (\n                  <div key={item.id} className=\"flex items-center space-x-4 py-4 border-b\">\n                    <img\n                      src={item.product.images[0] || \"/placeholder-image.jpg\"}\n                      alt={item.product.name}\n                      className=\"w-16 h-16 object-cover rounded-lg\"\n                    />\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-semibold text-gray-900 truncate\">\n                        {item.product.name}\n                      </h4>\n                      <p className=\"text-terracotta font-medium\">\n                        ₹{parseFloat(item.product.price).toLocaleString()}\n                      </p>\n                      \n                      {/* Quantity Controls */}\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleQuantityChange(item.productId, item.quantity - 1)}\n                          disabled={isUpdating || isRemoving}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        \n                        <span className=\"font-medium min-w-[2rem] text-center\">\n                          {item.quantity}\n                        </span>\n                        \n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleQuantityChange(item.productId, item.quantity + 1)}\n                          disabled={isUpdating || isRemoving || item.quantity >= item.product.stock}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col items-end space-y-2\">\n                      <p className=\"font-semibold text-gray-900\">\n                        ₹{(parseFloat(item.product.price) * item.quantity).toLocaleString()}\n                      </p>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeItem(item.productId)}\n                        disabled={isRemoving}\n                        className=\"text-red-500 hover:text-red-700 h-8 w-8 p-0\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Cart Footer */}\n          {cartItems.length > 0 && (\n            <div className=\"border-t pt-4 space-y-4\">\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Total:</span>\n                <span className=\"text-terracotta\">₹{total.toLocaleString()}</span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Link href=\"/cart\" onClick={onClose}>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    View Cart\n                  </Button>\n                </Link>\n                <Button className=\"w-full bg-terracotta hover:bg-terracotta/90\">\n                  Proceed to Checkout\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":6088},"client/src/hooks/use-admin-auth.ts":{"content":"\nimport { useState, useEffect } from 'react';\n\ninterface AdminAuth {\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n  username?: string;\n}\n\nexport function useAdminAuth(): AdminAuth {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [username, setUsername] = useState<string>();\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    const sessionToken = localStorage.getItem('admin_session_token');\n    const expiresAt = localStorage.getItem('admin_session_expires');\n    \n    if (!sessionToken || !expiresAt) {\n      setIsLoading(false);\n      return;\n    }\n\n    // Check if session is expired\n    if (Date.now() > parseInt(expiresAt)) {\n      logout();\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/admin/me', {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setIsAuthenticated(true);\n        setUsername(data.username);\n      } else {\n        logout();\n      }\n    } catch (error) {\n      console.error('Admin auth check error:', error);\n      logout();\n    }\n    \n    setIsLoading(false);\n  };\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const credentials = btoa(`${username}:${password}`);\n      const response = await fetch('/api/admin/auth', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${credentials}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('admin_session_token', data.sessionToken);\n        localStorage.setItem('admin_session_expires', data.expiresAt.toString());\n        setIsAuthenticated(true);\n        setUsername(username);\n        return true;\n      } else {\n        const error = await response.json();\n        console.error('Login failed:', error.message);\n        return false;\n      }\n    } catch (error) {\n      console.error('Admin login error:', error);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    const sessionToken = localStorage.getItem('admin_session_token');\n    \n    if (sessionToken) {\n      try {\n        await fetch('/api/admin/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${sessionToken}`,\n          },\n        });\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    }\n\n    localStorage.removeItem('admin_session_token');\n    localStorage.removeItem('admin_session_expires');\n    setIsAuthenticated(false);\n    setUsername(undefined);\n  };\n\n  return {\n    isAuthenticated,\n    login,\n    logout,\n    isLoading,\n    username,\n  };\n}\n\n// Function to get admin auth header for API calls\nexport function getAdminAuthHeader(): { Authorization: string } | {} {\n  const sessionToken = localStorage.getItem('admin_session_token');\n  const expiresAt = localStorage.getItem('admin_session_expires');\n\n  if (sessionToken && expiresAt && Date.now() < parseInt(expiresAt)) {\n    return { Authorization: `Bearer ${sessionToken}` };\n  }\n\n  // Clear expired session\n  localStorage.removeItem('admin_session_token');\n  localStorage.removeItem('admin_session_expires');\n  return {};\n}\n","size_bytes":3511},"client/src/hooks/use-auth.ts":{"content":"\nimport { useState, useEffect } from \"react\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const storedSessionId = localStorage.getItem(\"sessionId\");\n    if (storedSessionId) {\n      setSessionId(storedSessionId);\n      fetchUserInfo(storedSessionId);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchUserInfo = async (sessionId: string) => {\n    try {\n      const response = await fetch(\"/api/auth/me\", {\n        headers: {\n          Authorization: `Bearer ${sessionId}`,\n        },\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        localStorage.removeItem(\"sessionId\");\n        setSessionId(null);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch user info:\", error);\n      localStorage.removeItem(\"sessionId\");\n      setSessionId(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = (userData: User, newSessionId: string) => {\n    setUser(userData);\n    setSessionId(newSessionId);\n    localStorage.setItem(\"sessionId\", newSessionId);\n  };\n\n  const logout = async () => {\n    try {\n      if (sessionId) {\n        await fetch(\"/api/auth/logout\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${sessionId}`,\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    } finally {\n      setUser(null);\n      setSessionId(null);\n      localStorage.removeItem(\"sessionId\");\n    }\n  };\n\n  return {\n    user,\n    sessionId,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    logout,\n  };\n}\n","size_bytes":1875},"client/src/hooks/use-cart.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { getCartItems, addToCart, updateCartItem, removeFromCart, clearCart } from \"@/lib/api\";\nimport type { CartItemWithProduct, InsertCartItem } from \"@shared/schema\";\n\n// Generate a session ID for cart persistence\nconst getSessionId = (): string => {\n  let sessionId = localStorage.getItem(\"cart-session-id\");\n  if (!sessionId) {\n    sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    localStorage.setItem(\"cart-session-id\", sessionId);\n  }\n  return sessionId;\n};\n\nexport function useCart() {\n  const [sessionId] = useState(getSessionId);\n  const queryClient = useQueryClient();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\", sessionId],\n    queryFn: () => getCartItems(sessionId),\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: (cartItem: Omit<InsertCartItem, \"sessionId\">) =>\n      addToCart({ ...cartItem, sessionId }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", sessionId] });\n    },\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: ({ productId, quantity }: { productId: number; quantity: number }) =>\n      updateCartItem(sessionId, productId, quantity),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", sessionId] });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: (productId: number) => removeFromCart(sessionId, productId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", sessionId] });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: () => clearCart(sessionId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", sessionId] });\n    },\n  });\n\n  const total = cartItems.reduce(\n    (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n    0\n  );\n\n  const itemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n\n  return {\n    cartItems,\n    total,\n    itemCount,\n    isLoading,\n    addToCart: addToCartMutation.mutate,\n    updateItem: updateItemMutation.mutate,\n    removeItem: removeItemMutation.mutate,\n    clearCart: clearCartMutation.mutate,\n    isAddingToCart: addToCartMutation.isPending,\n    isUpdating: updateItemMutation.isPending,\n    isRemoving: removeItemMutation.isPending,\n    isClearing: clearCartMutation.isPending,\n  };\n}\n","size_bytes":2511},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-wishlist.ts":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { getWishlist, addToWishlist, removeFromWishlist } from \"@/lib/api\";\nimport { useAuth } from \"./use-auth\";\nimport { useToast } from \"./use-toast\";\n\nexport function useWishlist() {\n  const { isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const {\n    data: wishlistItems = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/wishlist\"],\n    queryFn: getWishlist,\n    enabled: isAuthenticated,\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: addToWishlist,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Added to wishlist\",\n        description: \"Product has been added to your wishlist.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to wishlist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: removeFromWishlist,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Removed from wishlist\",\n        description: \"Product has been removed from your wishlist.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove product from wishlist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isInWishlist = (productId: number) => {\n    return wishlistItems.some((item) => item.id === productId);\n  };\n\n  const toggleWishlist = (productId: number) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login required\",\n        description: \"Please log in to add items to your wishlist.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isInWishlist(productId)) {\n      removeFromWishlistMutation.mutate(productId);\n    } else {\n      addToWishlistMutation.mutate(productId);\n    }\n  };\n\n  return {\n    wishlistItems,\n    isLoading,\n    error,\n    isInWishlist,\n    toggleWishlist,\n    isAddingToWishlist: addToWishlistMutation.isPending,\n    isRemovingFromWishlist: removeFromWishlistMutation.isPending,\n  };\n}","size_bytes":2291},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  Product, \n  Category, \n  CartItem, \n  Order, \n  InsertProduct, \n  InsertCartItem, \n  InsertOrder,\n  InsertCategory,\n  ProductWithCategory,\n  CartItemWithProduct \n} from \"@shared/schema\";\nimport { getAdminAuthHeader } from \"@/hooks/use-admin-auth\";\n\n// Categories\nexport const getCategories = async (): Promise<Category[]> => {\n  const res = await fetch(\"/api/categories\");\n  return res.json();\n};\n\nexport const getCategoryBySlug = async (slug: string): Promise<Category> => {\n  const res = await fetch(`/api/categories/${slug}`);\n  return res.json();\n};\n\nexport const createCategory = async (category: InsertCategory): Promise<Category> => {\n  const response = await fetch(\"/api/categories\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAdminAuthHeader(),\n    },\n    body: JSON.stringify(category),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to create category\");\n  }\n\n  return response.json();\n};\n\nexport const updateCategory = async (id: number, category: Partial<InsertCategory>): Promise<Category> => {\n  const response = await fetch(`/api/categories/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAdminAuthHeader(),\n    },\n    body: JSON.stringify(category),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to update category\");\n  }\n\n  return response.json();\n};\n\nexport const deleteCategory = async (id: number): Promise<void> => {\n  const response = await fetch(`/api/categories/${id}`, {\n    method: \"DELETE\",\n    headers: getAdminAuthHeader(),\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to delete category\");\n  }\n};\n\n// Products\nexport const getProducts = async (params?: {\n  category?: string;\n  search?: string;\n  featured?: boolean;\n}): Promise<Product[]> => {\n  const searchParams = new URLSearchParams();\n  if (params?.category) searchParams.append(\"category\", params.category);\n  if (params?.search) searchParams.append(\"search\", params.search);\n  if (params?.featured) searchParams.append(\"featured\", \"true\");\n\n  const res = await fetch(`/api/products?${searchParams}`);\n  return res.json();\n};\n\nexport const getProductsWithCategory = async (): Promise<ProductWithCategory[]> => {\n  const res = await fetch(\"/api/products-with-category\");\n  return res.json();\n};\n\nexport async function getProduct(id: number): Promise<ProductWithCategory> {\n  const response = await fetch(`/api/products/${id}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch product\");\n  }\n  return response.json();\n}\n\nexport async function getRecommendedProducts(productId: number): Promise<Product[]> {\n  const response = await fetch(`/api/products/${productId}/recommendations`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch recommended products\");\n  }\n  return response.json();\n}\n\nexport async function createProduct(productData: InsertProduct) {\n  const response = await fetch(\"/api/products\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAdminAuthHeader(),\n    },\n    body: JSON.stringify(productData),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to create product\");\n  }\n\n  return response.json();\n}\n\nexport async function updateProduct(id: number, productData: Partial<InsertProduct>) {\n  const response = await fetch(`/api/products/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAdminAuthHeader(),\n    },\n    body: JSON.stringify(productData),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to update product\");\n  }\n\n  return response.json();\n}\n\nexport async function deleteImage(imageUrl: string) {\n  const response = await fetch(\"/api/delete-image\", {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ imageUrl }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to delete image: ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function deleteProduct(id: number) {\n  const response = await fetch(`/api/products/${id}`, {\n    method: \"DELETE\",\n    headers: getAdminAuthHeader(),\n  });\n  if (!response.ok) throw new Error(\"Failed to delete product\");\n  return response.json();\n}\n\n// Reviews\nexport async function getProductReviews(productId: number) {\n  const response = await fetch(`/api/products/${productId}/reviews`);\n  if (!response.ok) throw new Error(\"Failed to fetch reviews\");\n  return response.json();\n}\n\nexport async function getProductReviewStats(productId: number) {\n  const response = await fetch(`/api/products/${productId}/review-stats`);\n  if (!response.ok) throw new Error(\"Failed to fetch review stats\");\n  return response.json();\n}\n\nexport async function createReview(reviewData: {\n  productId: number;\n  rating: number;\n  title: string;\n  comment: string;\n}) {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  const response = await fetch(\"/api/reviews\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${sessionId}`,\n    },\n    body: JSON.stringify(reviewData),\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to create review\");\n  }\n  return response.json();\n}\n\nexport async function getUserReviews() {\n  const token = localStorage.getItem(\"auth_token\");\n  const response = await fetch(\"/api/users/reviews\", {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error(\"Failed to fetch user reviews\");\n  return response.json();\n}\n\nexport async function updateReview(id: number, reviewData: {\n  rating?: number;\n  title?: string;\n  comment?: string;\n}) {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  const response = await fetch(`/api/reviews/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${sessionId}`,\n    },\n    body: JSON.stringify(reviewData),\n  });\n  if (!response.ok) throw new Error(\"Failed to update review\");\n  return response.json();\n}\n\nexport async function deleteReview(id: number) {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  const response = await fetch(`/api/reviews/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${sessionId}`,\n    },\n  });\n  if (!response.ok) throw new Error(\"Failed to delete review\");\n  return response.json();\n}\n\nexport async function uploadImage(file: File): Promise<{ imageUrl: string }> {\n  const formData = new FormData();\n  formData.append('image', file);\n\n  const response = await fetch('/api/upload-image', {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to upload image\");\n  }\n\n  return response.json();\n}\n\nexport async function uploadCategoryImage(file: File): Promise<{ imageUrl: string }> {\n  const formData = new FormData();\n  formData.append('image', file);\n\n  const response = await fetch('/api/upload-category-image', {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload category image');\n  }\n\n  return response.json();\n}\n\n// Cart\nexport const getCartItems = async (sessionId: string): Promise<CartItemWithProduct[]> => {\n  const res = await fetch(`/api/cart/${sessionId}`);\n  return res.json();\n};\n\nexport const addToCart = async (cartItem: InsertCartItem): Promise<CartItem> => {\n  const res = await apiRequest(\"POST\", \"/api/cart\", cartItem);\n  return res.json();\n};\n\nexport const updateCartItem = async (sessionId: string, productId: number, quantity: number): Promise<CartItem> => {\n  const res = await apiRequest(\"PUT\", `/api/cart/${sessionId}/${productId}`, { quantity });\n  return res.json();\n};\n\nexport const removeFromCart = async (sessionId: string, productId: number): Promise<void> => {\n  await apiRequest(\"DELETE\", `/api/cart/${sessionId}/${productId}`);\n};\n\nexport const clearCart = async (sessionId: string): Promise<void> => {\n  await apiRequest(\"DELETE\", `/api/cart/${sessionId}`);\n};\n\n// Orders\nexport const getOrders = async (): Promise<Order[]> => {\n  const res = await fetch(\"/api/orders\");\n  return res.json();\n};\n\nexport const getOrder = async (id: number): Promise<Order> => {\n  const res = await fetch(`/api/orders/${id}`);\n  return res.json();\n};\n\nexport const createOrder = async (order: InsertOrder, sessionId: string): Promise<Order> => {\n  console.log(\"Creating order with data:\", order);\n  console.log(\"Using session ID:\", sessionId);\n\n  const res = await fetch(\"/api/orders\", {\n    method: \"POST\",\n    headers: { \n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${sessionId}`\n    },\n    body: JSON.stringify(order),\n  });\n\n  console.log(\"Order creation response status:\", res.status);\n\n  if (!res.ok) {\n    const error = await res.json();\n    console.error(\"Order creation error:\", error);\n    throw new Error(error.message || \"Failed to create order\");\n  }\n\n  const result = await res.json();\n  console.log(\"Order created successfully:\", result);\n  return result;\n};\n\nexport async function updateOrderStatus(id: number, status: string) {\n  const response = await fetch(`/api/orders/${id}/status`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ status }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to update order status\");\n  }\n\n  return response.json();\n}\n\nexport async function trackOrder(trackingNumber: string) {\n  const response = await fetch(`/api/track/${trackingNumber}`);\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to track order\");\n  }\n\n  return response.json();\n}\n\n// Settings API functions\nexport async function getSettings() {\n  const response = await fetch(\"/api/settings\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch settings\");\n  }\n  return response.json();\n}\n\nexport async function getSetting(key: string) {\n  const response = await fetch(`/api/settings/${key}`);\n  if (!response.ok) {\n    if (response.status === 404) {\n      return null;\n    }\n    throw new Error(\"Failed to fetch setting\");\n  }\n  return response.json();\n}\n\nexport async function createSetting(settingData: any) {\n  const response = await fetch(\"/api/settings\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(settingData),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to create setting\");\n  }\n\n  return response.json();\n}\n\nexport async function updateSetting(key: string, value: string) {\n  const response = await fetch(`/api/settings/${key}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ value }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to update setting\");\n  }\n\n  return response.json();\n}\n\n// Wishlist API functions\nexport async function getWishlist(): Promise<Product[]> {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  if (!sessionId) {\n    throw new Error(\"Not authenticated\");\n  }\n\n  const response = await fetch(\"/api/wishlist\", {\n    headers: {\n      Authorization: `Bearer ${sessionId}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch wishlist\");\n  }\n\n  return response.json();\n}\n\nexport async function addToWishlist(productId: number): Promise<void> {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  if (!sessionId) {\n    throw new Error(\"Not authenticated\");\n  }\n\n  const response = await fetch(`/api/wishlist/${productId}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${sessionId}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to add to wishlist\");\n  }\n}\n\nexport async function removeFromWishlist(productId: number): Promise<void> {\n  const sessionId = localStorage.getItem(\"sessionId\");\n  if (!sessionId) {\n    throw new Error(\"Not authenticated\");\n  }\n\n  const response = await fetch(`/api/wishlist/${productId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${sessionId}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to remove from wishlist\");\n  }\n}\n\n","size_bytes":12582},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAdminAuth } from \"@/hooks/use-admin-auth\";\nimport { AdminLogin } from \"@/components/admin/admin-login\";\nimport { \n  Package, \n  ShoppingBag, \n  Tags, \n  Settings, \n  BarChart3,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AdminLayout } from \"@/components/admin/admin-layout\";\nimport { ProductForm } from \"@/components/admin/product-form\";\nimport { CategoryForm } from \"@/components/admin/category-form\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  getProductsWithCategory, \n  getOrders, \n  getCategories,\n  deleteProduct,\n  deleteCategory,\n  updateOrderStatus \n} from \"@/lib/api\";\nimport type { ProductWithCategory, Order, Category } from \"@shared/schema\";\n\nconst navigation = [\n  { name: \"Products\", tab: \"products\", icon: Package },\n  { name: \"Orders\", tab: \"orders\", icon: ShoppingBag },\n  { name: \"Categories\", tab: \"categories\", icon: Tags },\n  { name: \"Analytics\", tab: \"analytics\", icon: BarChart3 },\n  { name: \"Settings\", tab: \"settings\", icon: Settings },\n];\n\nexport default function Admin() {\n  const { isAuthenticated, login, logout, isLoading, username } = useAdminAuth();\n  const params = useParams();\n  const [location] = useLocation();\n  const activeTab = params.tab || \"products\";\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedProduct, setSelectedProduct] = useState<ProductWithCategory | null>(null);\n  const [isProductFormOpen, setIsProductFormOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\n  const [isCategoryFormOpen, setIsCategoryFormOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products-with-category\"],\n    queryFn: getProductsWithCategory,\n    enabled: activeTab === \"products\",\n  });\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: getOrders,\n    enabled: activeTab === \"orders\",\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: getCategories,\n    enabled: activeTab === \"categories\",\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: deleteProduct,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-with-category\"] });\n      toast({\n        title: \"Product deleted\",\n        description: \"Product has been successfully deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: deleteCategory,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category deleted\",\n        description: \"Category has been successfully deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: ({ id, status }: { id: number; status: string }) =>\n      updateOrderStatus(id, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order updated\",\n        description: \"Order status has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.sku.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleDeleteProduct = (productId: number) => {\n    deleteProductMutation.mutate(productId);\n  };\n\n  const handleEditProduct = (product: ProductWithCategory) => {\n    setSelectedProduct(product);\n    setIsProductFormOpen(true);\n  };\n\n  const handleAddProduct = () => {\n    setSelectedProduct(null);\n    setIsProductFormOpen(true);\n  };\n\n  const handleDeleteCategory = (categoryId: number) => {\n    deleteCategoryMutation.mutate(categoryId);\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setSelectedCategory(category);\n    setIsCategoryFormOpen(true);\n  };\n\n  const handleAddCategory = () => {\n    setSelectedCategory(null);\n    setIsCategoryFormOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"confirmed\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"shipped\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const renderProducts = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search products...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-80\"\n            />\n          </div>\n        </div>\n        <Button onClick={handleAddProduct} className=\"bg-terracotta hover:bg-terracotta/90\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Product\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Products ({filteredProducts.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Product</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Price</TableHead>\n                <TableHead>Stock</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {productsLoading ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    Loading products...\n                  </TableCell>\n                </TableRow>\n              ) : filteredProducts.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    No products found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredProducts.map((product) => (\n                  <TableRow key={product.id}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <img\n                          src={product.images[0] || \"/placeholder-image.jpg\"}\n                          alt={product.name}\n                          className=\"w-12 h-12 object-cover rounded-lg\"\n                        />\n                        <div>\n                          <div className=\"font-medium\">{product.name}</div>\n                          <div className=\"text-sm text-gray-500\">SKU: {product.sku}</div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {product.category?.name || \"Unknown Category\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      ₹{parseFloat(product.price).toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={product.stock > 5 ? \"default\" : product.stock > 0 ? \"secondary\" : \"destructive\"}\n                      >\n                        {product.stock} in stock\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={product.featured ? \"default\" : \"secondary\"}>\n                        {product.featured ? \"Featured\" : \"Regular\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end space-x-2\">\n                        <Link href={`/products/${product.id}`}>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </Link>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleEditProduct(product)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Product</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{product.name}\"? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteProduct(product.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderOrders = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Orders ({orders.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Order ID</TableHead>\n                <TableHead>Tracking #</TableHead>\n                <TableHead>Customer</TableHead>\n                <TableHead>Total</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {ordersLoading ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    Loading orders...\n                  </TableCell>\n                </TableRow>\n              ) : orders.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    No orders found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                orders.map((order) => (\n                  <TableRow key={order.id}>\n                    <TableCell className=\"font-medium\">#{order.id}</TableCell>\n                    <TableCell className=\"font-mono text-sm\">{order.trackingNumber}</TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{order.customerName}</div>\n                        <div className=\"text-sm text-gray-500\">{order.customerEmail}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      ₹{parseFloat(order.total).toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(order.status)}>\n                        {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(order.createdAt).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Select\n                        value={order.status}\n                        onValueChange={(status) => \n                          updateOrderMutation.mutate({ id: order.id, status })\n                        }\n                      >\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                          <SelectItem value=\"shipped\">Shipped</SelectItem>\n                          <SelectItem value=\"delivered\">Delivered</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderCategories = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Categories</h2>\n        <Button onClick={handleAddCategory} className=\"bg-terracotta hover:bg-terracotta/90\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Category\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {categoriesLoading ? (\n          <div className=\"col-span-full text-center py-8\">\n            Loading categories...\n          </div>\n        ) : categories.length === 0 ? (\n          <div className=\"col-span-full text-center py-8\">\n            No categories found\n          </div>\n        ) : (\n          categories.map((category) => {\n            const productCount = products.filter(p => p.categoryId === category.id).length;\n            return (\n              <Card key={category.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-lg\">{category.name}</h3>\n                    <Badge variant=\"secondary\">{productCount} products</Badge>\n                  </div>\n                  <p className=\"text-gray-600 text-sm mb-2\">\n                    <strong>Slug:</strong> {category.slug}\n                  </p>\n                  <p className=\"text-gray-600 text-sm mb-4\">{category.description || \"No description\"}</p>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => handleEditCategory(category)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Category</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete \"{category.name}\"? This action cannot be undone.\n                            {productCount > 0 && (\n                              <span className=\"block mt-2 text-orange-600 font-medium\">\n                                Warning: This category has {productCount} product(s). Deleting it may affect those products.\n                              </span>\n                            )}\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => handleDeleteCategory(category.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n\n  const renderAnalytics = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{products.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {products.filter(p => p.featured).length} featured\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{orders.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {orders.filter(o => o.status === \"pending\").length} pending\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ₹{orders.reduce((sum, order) => sum + parseFloat(order.total), 0).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total sales\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n            <Tags className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{categories.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active categories\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {orders.slice(0, 5).map((order) => (\n              <div key={order.id} className=\"flex items-center space-x-4\">\n                <div className=\"w-2 h-2 bg-terracotta rounded-full\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">\n                    New order #{order.id} from {order.customerName}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {new Date(order.createdAt).toLocaleString()}\n                  </p>\n                </div>\n                <Badge className={getStatusColor(order.status)}>\n                  {order.status}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n\n\n  const renderSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Store Settings</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Store Name</label>\n              <Input value=\"Makhana Craft - Premium Makhana\" readOnly />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Currency</label>\n              <Input value=\"INR (₹)\" readOnly />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Timezone</label>\n              <Input value=\"Asia/Kolkata\" readOnly />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Default Language</label>\n              <Input value=\"English\" readOnly />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Shipping Settings</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Free Shipping Threshold</label>\n              <Input value=\"₹0 (Always Free)\" readOnly />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Default Shipping Time</label>\n              <Input value=\"7-14 Business Days\" readOnly />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"products\":\n        return renderProducts();\n      case \"orders\":\n        return renderOrders();\n      case \"categories\":\n        return renderCategories();\n      case \"analytics\":\n        return renderAnalytics();\n      case \"settings\":\n        return renderSettings();\n      default:\n        return renderProducts();\n    }\n  };\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-terracotta mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login if not authenticated\n  if (!isAuthenticated) {\n    return <AdminLogin onLogin={login} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-gray-900 text-white min-h-screen\">\n          <div className=\"p-6\">\n            <Link href=\"/\">\n              <h3 className=\"font-display text-xl font-semibold mb-6 text-terracotta\">\n                Hastkala Admin\n              </h3>\n            </Link>\n            <nav className=\"space-y-2\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                const isActive = activeTab === item.tab;\n\n                return (\n                  <Link key={item.name} href={`/admin/${item.tab}`}>\n                    <Button\n                      variant=\"ghost\"\n                      className={`w-full justify-start text-left ${\n                        isActive \n                          ? \"bg-terracotta text-white hover:bg-terracotta/90\" \n                          : \"text-gray-300 hover:bg-gray-800 hover:text-white\"\n                      }`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-2\" />\n                      {item.name}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n\n          <div className=\"absolute bottom-4 left-4 space-y-2\">\n            <Button \n              variant=\"ghost\" \n              className=\"text-gray-400 hover:text-white w-full mb-2\"\n              onClick={logout}\n            >\n              🚪 Logout {username ? `(${username})` : ''}\n            </Button>\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"text-gray-400 hover:text-white w-full\">\n                ← Back to Store\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"mb-6\">\n              <h1 className=\"font-display text-3xl font-bold text-gray-900\">\n                {navigation.find(n => n.tab === activeTab)?.name || \"Admin Dashboard\"}\n              </h1>\n            </div>\n\n            {renderTabContent()}\n          </div>\n        </div>\n      </div>\n\n      {/* Product Form Dialog */}\n      <Dialog open={isProductFormOpen} onOpenChange={setIsProductFormOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedProduct ? \"Edit Product\" : \"Add New Product\"}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedProduct ? \"Update product information\" : \"Create a new product for your store\"}\n            </DialogDescription>\n          </DialogHeader>\n          <ProductForm \n            product={selectedProduct || undefined}\n            onSuccess={() => setIsProductFormOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Category Form Dialog */}\n      <Dialog open={isCategoryFormOpen} onOpenChange={setIsCategoryFormOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedCategory ? \"Edit Category\" : \"Add New Category\"}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedCategory ? \"Update category information\" : \"Create a new category for organizing products\"}\n            </DialogDescription>\n          </DialogHeader>\n          <CategoryForm \n            category={selectedCategory || undefined}\n            onSuccess={() => setIsCategoryFormOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":28566},"client/src/pages/cart.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Minus, Plus, Trash2, ArrowLeft, ShoppingBag, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { createOrder } from \"@/lib/api\";\nimport { AuthDialog } from \"@/components/auth/auth-dialog\";\n\nexport default function Cart() {\n  const [location, navigate] = useLocation();\n  const { cartItems, removeFromCart, updateQuantity } = useCart();\n  const { isAuthenticated, user } = useAuth();\n  const [showAuthDialog, setShowAuthDialog] = useState(false);\n  const [isCheckingOut, setIsCheckingOut] = useState(false);\n  const { toast } = useToast();\n  const [customerInfo, setCustomerInfo] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\"\n  });\n\n  const total = cartItems.reduce((acc, item) => \n    acc + (parseFloat(item.product.price) * item.quantity), 0\n  );\n\n  const handleCheckout = async () => {\n    if (!isAuthenticated) {\n      setShowAuthDialog(true);\n      return;\n    }\n\n    if (!customerInfo.name || !customerInfo.email || !customerInfo.address) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsCheckingOut(true);\n\n    try {\n      const orderData = {\n        userId: user?.id,\n        customerName: customerInfo.name,\n        customerEmail: customerInfo.email,\n        customerPhone: customerInfo.phone,\n        shippingAddress: customerInfo.address,\n        total: total.toString(),\n        status: \"pending\",\n        items: JSON.stringify(cartItems)\n      };\n\n      const newOrder = await createOrder(orderData);\n      \n      // Clear cart after successful order\n      cartItems.forEach(item => removeFromCart(item.productId));\n      \n      toast({\n        title: \"Order Placed!\",\n        description: \"Your order has been successfully placed.\",\n      });\n\n      navigate(\"/profile\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong while placing your order.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsCheckingOut(false);\n    }\n  };\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 py-16 text-center\">\n          <h1 className=\"text-2xl font-semibold mb-4\">Your Cart is Empty</h1>\n          <p className=\"text-gray-600 mb-8\">Browse our collections to add items to your cart</p>\n          <Link href=\"/products\">\n            <Button className=\"bg-terracotta hover:bg-terracotta/90\">\n              Continue Shopping\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/products\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Continue Shopping\n            </Button>\n          </Link>\n          <h1 className=\"font-display text-3xl font-bold text-gray-900 ml-6\">\n            Shopping Cart\n          </h1>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Cart Items ({cartItems.length})</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => clearCart()}\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    Clear Cart\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {cartItems.map((item, index) => (\n                  <div key={item.id}>\n                    <div className=\"flex items-center space-x-4\">\n                      <Link href={`/products/${item.productId}`}>\n                        <img\n                          src={item.product.images[0] || \"/placeholder-image.jpg\"}\n                          alt={item.product.name}\n                          className=\"w-20 h-20 object-cover rounded-lg cursor-pointer hover:opacity-90 transition-opacity\"\n                        />\n                      </Link>\n\n                      <div className=\"flex-1 min-w-0\">\n                        <Link href={`/products/${item.productId}`}>\n                          <h3 className=\"font-semibold text-gray-900 hover:text-terracotta transition-colors cursor-pointer\">\n                            {item.product.name}\n                          </h3>\n                        </Link>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          SKU: {item.product.sku}\n                        </p>\n                        <p className=\"text-terracotta font-medium\">\n                          ₹{parseFloat(item.product.price).toLocaleString()} each\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleQuantityChange(item.productId, item.quantity - 1)}\n                          disabled={isUpdating || isRemoving}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n\n                        <span className=\"font-medium min-w-[3rem] text-center\">\n                          {item.quantity}\n                        </span>\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleQuantityChange(item.productId, item.quantity + 1)}\n                          disabled={isUpdating || isRemoving || item.quantity >= item.product.stock}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-gray-900\">\n                          ₹{(parseFloat(item.product.price) * item.quantity).toLocaleString()}\n                        </p>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => removeItem(item.productId)}\n                          disabled={isRemoving}\n                          className=\"text-red-500 hover:text-red-700 mt-2\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {index < cartItems.length - 1 && <Separator className=\"mt-4\" />}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary & Checkout */}\n          <div className=\"space-y-6\">\n            {/* Order Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  {cartItems.map((item) => (\n                    <div key={item.id} className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">\n                        {item.product.name} × {item.quantity}\n                      </span>\n                      <span>₹{(parseFloat(item.product.price) * item.quantity).toLocaleString()}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal</span>\n                    <span>₹{total.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping</span>\n                    <span className=\"text-green-600\">Free</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tax</span>\n                    <span>₹{Math.round(total * 0.18).toLocaleString()}</span>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleCheckout}\n                  disabled={isCheckingOut}\n                  className={`w-full bg-terracotta hover:bg-terracotta/90`}\n                  size=\"lg\"\n                >\n                  {isCheckingOut ? \"Processing...\" : isAuthenticated ? \"Place Order\" : \"Login to Place Order\"}\n                </Button>\n\n                <p className=\"text-xs text-gray-500 text-center\">\n                  By placing your order, you agree to our terms and conditions.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* User Authentication Status */}\n            {isAuthenticated ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      Logged in as\n                    </span>\n                    <Button variant=\"outline\" size=\"sm\" onClick={logout}>\n                      Logout\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600\">{user?.name}</p>\n                  <p className=\"text-sm text-gray-500\">{user?.email}</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Authentication Required</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Please login or create an account to place your order.\n                  </p>\n                  <Button \n                    onClick={() => setShowAuthDialog(true)}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    Login / Register\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Customer Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Full Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={customerInfo.name}\n                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter your full name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\">Email Address *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={customerInfo.email}\n                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"Enter your email\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={customerInfo.phone}\n                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Enter your phone number\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">Shipping Address *</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={customerInfo.address}\n                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"Enter your complete address\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button \n                  onClick={handleCheckout}\n                  disabled={isCheckingOut}\n                  className={`w-full bg-terracotta hover:bg-terracotta/90`}\n                  size=\"lg\"\n                >\n                  {isCheckingOut ? \"Processing...\" : isAuthenticated ? \"Place Order\" : \"Login to Place Order\"}\n                </Button>\n\n                <p className=\"text-xs text-gray-500 text-center\">\n                  By placing your order, you agree to our terms and conditions.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <AuthDialog\n        open={showAuthDialog}\n        onOpenChange={setShowAuthDialog}\n        onSuccess={(userData, sessionId) => {\n          login(userData, sessionId);\n          toast({\n            title: \"Success!\",\n            description: \"You can now complete your order.\",\n          });\n        }}\n      />\n    </div>\n  );\n}","size_bytes":14210},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Star, Award, Truck, Shield, Users, Sparkles, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { getProducts, getCategories, getSettings } from \"@/lib/api\";\nconst makhanafarmImage = \"https://cdn.jsdelivr.net/gh/aaravs0709gd-droid/SVj@main/Gemini_Generated_Image_b8y4u8b8y4u8b8y4.png\";\nconst makhanaProcessingImage = \"https://cdn.jsdelivr.net/gh/aaravs0709gd-droid/SVj@main/Makhana-for-Weight-Loss-Benefits-Weight-Loss-Recipes.webp\";\nconst traditionalToolsImage = \"https://cdn.jsdelivr.net/gh/aaravs0709gd-droid/SVj@main/fe1be82bcea5974b50a7c44f216bba3d.jpg\";\nconst premiumMakhanaImage = \"https://cdn.jsdelivr.net/gh/aaravs0709gd-droid/SVj@main/Gemini_Generated_Image_f8556zf8556zf855%20(1).png\";\n\nexport default function Home() {\n  const { data: featuredProducts = [] } = useQuery({\n    queryKey: [\"/api/products\", { featured: true }],\n    queryFn: () => getProducts({ featured: true }),\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: getCategories,\n  });\n\n  const { data: settings = [] } = useQuery({\n    queryKey: [\"/api/settings\"],\n    queryFn: getSettings,\n  });\n\n  // Convert settings array to key-value object\n  const settingsMap = settings.reduce((acc: any, setting: any) => {\n    acc[setting.key] = setting.value;\n    return acc;\n  }, {});\n\n  // Default values if settings are not available\n  const heroTitle = settingsMap.heroTitle || \"Authentic\";\n  const heroSubtitle = settingsMap.heroSubtitle || \"Indian Arts\";\n  const heroDescription = settingsMap.heroDescription || \"Premium quality makhana sourced from the finest farms across India. Each batch is carefully processed using traditional methods to preserve natural goodness and authentic taste.\";\n  const heroImage = settingsMap.heroImage || \"/images/hero-banner.png\";\n  const heroButtonText = settingsMap.heroButtonText || \"Explore Collection\";\n  const heroButtonSecondaryText = settingsMap.heroButtonSecondaryText || \"Our Story\";\n\n  // Fallback images for categories without thumbnails\n  const fallbackCategoryImages = {\n    pottery: \"https://pixabay.com/get/gb570087a032ff2f3d571d2c0ea66b8c0c1922cc79890f4e40b065b584a8583a3764759c6653e0465c9a4aa8d5483d8363957d0cf25a46d507171428ac91144ee_1280.jpg\",\n    textiles: \"https://pixabay.com/get/g0c2883f32546fb1194e48ed2f9534dc76209e24104a2c2aaaee63cf584261f94432f323f9597e3aeae98ef54273a39acd39e829f6b2773296e831d0cd6eb2ecc_1280.jpg\",\n    jewelry: \"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    woodwork: \"https://images.unsplash.com/photo-1587813369290-091c9d432daf?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream ethnic-pattern\">\n      {/* Hero Section - Enhanced Indian Design */}\n      <section className=\"relative overflow-hidden\">\n        {/* Traditional Indian Pattern Background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-warm-cream via-soft-beige to-sandalwood\" />\n        \n        {/* Decorative overlay with traditional motifs */}\n        <div className=\"absolute inset-0 paisley-pattern opacity-30\" />\n        \n        {/* Decorative border elements */}\n        <div className=\"absolute top-0 left-0 w-full h-2 heritage-gradient\"></div>\n        <div className=\"absolute bottom-0 left-0 w-full h-2 heritage-gradient\"></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-8 sm:py-16 lg:py-24\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 items-center\">\n            {/* Left Content */}\n            <div className=\"text-left space-y-6 lg:space-y-8\">\n              <div className=\"space-y-4 lg:space-y-6\">\n                <div className=\"flex items-center justify-center sm:justify-start\">\n                  <Badge className=\"bg-saffron/20 backdrop-blur-sm text-henna border-terracotta/30 px-4 py-2 text-sm font-serif traditional-shadow\">\n                    <span className=\"hidden sm:inline\">🌾 Premium Makhana</span>\n                    <span className=\"sm:hidden\">🌾 Makhana</span>\n                  </Badge>\n                </div>\n                \n                <div className=\"text-center sm:text-left\">\n                  <h1 className=\"font-display text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight\">\n                    <span className=\"text-henna block\">Premium</span>\n                    <span className=\"text-terracotta block mt-2\">Makhana</span>\n                    <span className=\"text-saffron block mt-2 text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-serif italic\">Natural Collection</span>\n                  </h1>\n                </div>\n                \n                <div className=\"text-center sm:text-left\">\n                  <p className=\"text-base sm:text-lg lg:text-xl text-henna leading-relaxed max-w-lg mx-auto sm:mx-0 font-serif\">\n                    Nature's premium superfood. Each batch is carefully sourced from the finest makhana farms across India.\n                  </p>\n                  <p className=\"text-sm sm:text-base lg:text-lg text-copper/80 leading-relaxed max-w-lg mx-auto sm:mx-0 mt-3\">\n                    Premium quality makhana processed using traditional methods to preserve natural goodness and authentic taste.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 sm:gap-4 pt-4\">\n                <Link href=\"/products\" className=\"w-full sm:w-auto\">\n                  <Button className=\"bg-white hover:bg-gray-50 text-golden px-8 py-4 text-base font-serif font-semibold w-full sm:w-auto traditional-shadow hover:scale-105 transition-all duration-300 craft-border border-0\">\n                    <span className=\"text-golden drop-shadow-lg\">{heroButtonText}</span>\n                    <ArrowRight className=\"ml-2 h-4 w-4 text-golden drop-shadow-lg\" />\n                  </Button>\n                </Link>\n                <Button variant=\"outline\" className=\"border-white/50 text-white hover:bg-white/20 backdrop-blur-sm px-6 py-3 text-sm font-medium w-full sm:w-auto transition-all duration-300 bg-white/10\">\n                  <Heart className=\"mr-2 h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">{heroButtonSecondaryText}</span>\n                  <span className=\"sm:hidden\">Our Story</span>\n                </Button>\n              </div>\n              \n              \n            </div>\n            \n            {/* Enhanced Right Visual - Hidden on mobile, visible on desktop */}\n            <div className=\"relative mt-6 lg:mt-0 order-first lg:order-last hidden lg:block\">\n              {/* Main Image Container */}\n              <div className=\"relative w-full h-[600px] rounded-2xl overflow-hidden traditional-shadow\">\n                {/* Main Large Image */}\n                <img\n                  src={makhanafarmImage}\n                  alt=\"Makhana Farm and Processing\"\n                  className=\"w-full h-full object-cover\"\n                />\n                {/* Decorative Overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-t from-henna/40 via-transparent to-transparent\" />\n              </div>\n\n              {/* Floating Cards */}\n              <div className=\"absolute -left-12 top-1/4 z-10 transform -translate-y-1/2\">\n                <div className=\"bg-white/90 backdrop-blur-sm p-4 rounded-xl traditional-shadow craft-border w-48 hover:scale-105 transition-transform duration-300\">\n                  <img\n                    src={traditionalToolsImage}\n                    alt=\"Traditional Tools\"\n                    className=\"w-full h-24 object-cover rounded-lg mb-3\"\n                  />\n                  <p className=\"text-sm font-serif text-henna\">Traditional Processing Tools</p>\n                </div>\n              </div>\n\n              <div className=\"absolute -right-8 top-1/2 z-10\">\n                <div className=\"bg-white/90 backdrop-blur-sm p-4 rounded-xl traditional-shadow craft-border w-48 hover:scale-105 transition-transform duration-300\">\n                  <img\n                    src={makhanaProcessingImage}\n                    alt=\"Makhana Processing Workshop\"\n                    className=\"w-full h-24 object-cover rounded-lg mb-3\"\n                  />\n                  <p className=\"text-sm font-serif text-henna\">Makhana Processing</p>\n                </div>\n              </div>\n\n              <div className=\"absolute right-12 bottom-12 z-10\">\n                <div className=\"bg-white/90 backdrop-blur-sm p-4 rounded-xl traditional-shadow craft-border w-48 hover:scale-105 transition-transform duration-300\">\n                  <img\n                    src={premiumMakhanaImage}\n                    alt=\"Premium Makhana\"\n                    className=\"w-full h-24 object-cover rounded-lg mb-3\"\n                  />\n                  <p className=\"text-sm font-serif text-henna\">Premium Quality</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      \n\n      {/* Categories Section - Enhanced Indian Style */}\n      <section className=\"py-8 sm:py-16 lg:py-20 bg-gradient-to-b from-warm-cream via-sandalwood/20 to-soft-beige ethnic-pattern\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-16\">\n            <Badge className=\"bg-terracotta/20 text-henna border-terracotta/30 px-4 py-2 mb-6 text-sm font-serif traditional-shadow\">\n              🎨 Traditional Collections\n            </Badge>\n            <h2 className=\"font-display text-2xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-henna mb-6\">\n              Discover Our Collections\n            </h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-copper/80 max-w-4xl mx-auto leading-relaxed px-4 font-serif\">\n              Explore our carefully curated makhana varieties representing different regions and traditional processing methods across India\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 lg:gap-8\">\n            {categories.map((category, index) => (\n              <Link key={category.id} href={`/products?category=${category.slug}`}>\n                <Card className=\"group cursor-pointer h-full overflow-hidden craft-border traditional-shadow hover:scale-105 transition-all duration-300\">\n                  <div className=\"relative overflow-hidden\">\n                    <img\n                      src={category.thumbnail || fallbackCategoryImages[category.slug as keyof typeof fallbackCategoryImages] || \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"}\n                      alt={`${category.name} Collection`}\n                      className=\"w-full h-24 sm:h-40 lg:h-48 object-cover group-hover:scale-110 transition-transform duration-500\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-henna/80 via-terracotta/30 to-transparent\" />\n                    <div className=\"absolute top-2 sm:top-3 right-2 sm:right-3\">\n                      <Badge className=\"bg-saffron/90 text-white border-none backdrop-blur-sm text-xs font-serif\">\n                        {index === 0 ? '🏆 Popular' : index === 1 ? '⭐ Trending' : index === 2 ? '💎 Premium' : '🎨 Classic'}\n                      </Badge>\n                    </div>\n                    <div className=\"absolute bottom-1 sm:bottom-4 left-1 sm:left-4 text-white\">\n                      <h3 className=\"font-display text-xs sm:text-lg lg:text-xl font-bold mb-0.5 sm:mb-1 group-hover:text-turmeric transition-colors duration-300\">\n                        {category.name}\n                      </h3>\n                      <p className=\"text-xs opacity-90 leading-relaxed line-clamp-2 hidden sm:block font-serif\">\n                        {category.description}\n                      </p>\n                    </div>\n                  </div>\n                  <CardContent className=\"p-2 sm:p-4 bg-gradient-to-br from-warm-cream to-soft-beige paisley-pattern\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs font-serif font-medium text-henna\">\n                        Explore Collection\n                      </span>\n                      <ArrowRight className=\"h-3 w-3 text-terracotta group-hover:translate-x-1 group-hover:text-saffron transition-all duration-300\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-8 sm:py-16 lg:py-20 bg-gradient-to-br from-warm-cream via-soft-beige to-warm-cream\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-16\">\n            <Badge className=\"bg-saffron/10 text-saffron border-saffron/20 px-2 py-1 sm:px-4 sm:py-2 mb-3 sm:mb-6 text-xs sm:text-sm\">\n              Premium Selection\n            </Badge>\n            <h2 className=\"font-display text-xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-6\">\n              Featured <span className=\"text-saffron\">Masterpieces</span>\n            </h2>\n            <p className=\"text-sm sm:text-lg lg:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed px-4 hidden sm:block\">\n              Handpicked premium makhana that showcase the finest quality and freshness, each batch carefully sourced from trusted farmers\n            </p>\n          </div>\n          \n          {/* Mobile: Compact 2-column grid */}\n          <div className=\"block sm:hidden mb-6\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              {featuredProducts.slice(0, 4).map((product) => (\n                <div key={product.id} className=\"transform hover:scale-[1.02] transition-transform duration-300\">\n                  <ProductCard product={product} />\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Desktop: Multi-column grid */}\n          <div className=\"hidden sm:grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8 mb-8 sm:mb-16\">\n            {featuredProducts.map((product) => (\n              <div key={product.id} className=\"transform hover:scale-105 transition-transform duration-300\">\n                <ProductCard product={product} />\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"text-center\">\n            <Link href=\"/products\">\n              <Button size=\"lg\" className=\"bg-terracotta hover:bg-terracotta/90 text-white px-4 sm:px-8 py-2.5 sm:py-4 text-sm sm:text-lg shadow-lg hover:shadow-xl transition-shadow duration-300 w-full sm:w-auto\">\n                Discover All Varieties\n                <ArrowRight className=\"ml-2 h-3 w-3 sm:h-5 sm:w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Farmer Story Section */}\n      <section className=\"py-8 sm:py-16 lg:py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-12 lg:gap-16 items-center\">\n            <div className=\"order-2 lg:order-1\">\n              <Badge className=\"bg-terracotta/10 text-terracotta border-terracotta/20 px-2 py-1 sm:px-4 sm:py-2 mb-3 sm:mb-6 text-xs sm:text-sm\">\n                Our Heritage\n              </Badge>\n              <h2 className=\"font-display text-xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-6 leading-tight\">\n                Sustainable <span className=\"text-terracotta\">Farming</span><br className=\"hidden sm:block\" />\n                <span className=\"sm:hidden\"> & </span>Supporting <span className=\"text-saffron\">Farmers</span>\n              </h2>\n              <p className=\"text-sm sm:text-lg text-gray-600 mb-4 sm:mb-8 leading-relaxed\">\n                Every purchase directly supports makhana farming families across India. We work closely with skilled farmers, ensuring fair prices and promoting sustainable makhana cultivation for future generations.\n              </p>\n              \n              <div className=\"space-y-3 sm:space-y-6 mb-4 sm:mb-8\">\n                <div className=\"flex items-start space-x-2 sm:space-x-4\">\n                  <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-terracotta/10 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 sm:mt-1\">\n                    <Heart className=\"h-4 w-4 sm:h-6 sm:w-6 text-terracotta\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Direct Impact</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-base\">Your purchase directly supports farming families and helps promote sustainable makhana cultivation.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-2 sm:space-x-4\">\n                  <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-saffron/10 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 sm:mt-1\">\n                    <Award className=\"h-4 w-4 sm:h-6 sm:w-6 text-saffron\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Quality Assurance</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-base\">Every piece is carefully inspected and comes with authenticity certification.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-2 sm:space-x-4\">\n                  <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-terracotta/10 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 sm:mt-1\">\n                    <Users className=\"h-4 w-4 sm:h-6 sm:w-6 text-terracotta\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Community Building</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-base\">We foster a community that values authentic makhana quality and sustainable makhana farming practices.</p>\n                  </div>\n                </div>\n              </div>\n              \n              <Button size=\"lg\" variant=\"outline\" className=\"border-terracotta text-terracotta hover:bg-terracotta hover:text-white px-4 sm:px-8 py-2.5 sm:py-4 text-sm sm:text-lg w-full sm:w-auto\">\n                <span className=\"hidden sm:inline\">Learn Our Story</span>\n                <span className=\"sm:hidden\">Our Story</span>\n                <ArrowRight className=\"ml-2 h-3 w-3 sm:h-5 sm:w-5\" />\n              </Button>\n            </div>\n            \n            <div className=\"order-1 lg:order-2 hidden lg:block\">\n              <div className=\"relative\">\n                <div className=\"grid grid-cols-2 gap-2 sm:gap-4\">\n                  <div className=\"space-y-2 sm:space-y-4\">\n                    <img\n                      src={makhanafarmImage}\n                      alt=\"Makhana processing\"\n                      className=\"w-full h-32 sm:h-48 object-cover rounded-lg sm:rounded-xl shadow-lg\"\n                    />\n                    <img\n                      src={traditionalToolsImage}\n                      alt=\"Processing equipment\"\n                      className=\"w-full h-24 sm:h-32 object-cover rounded-lg sm:rounded-xl shadow-lg\"\n                    />\n                  </div>\n                  <div className=\"space-y-2 sm:space-y-4 mt-4 sm:mt-8\">\n                    <img\n                      src={premiumMakhanaImage}\n                      alt=\"Premium makhana\"\n                      className=\"w-full h-24 sm:h-32 object-cover rounded-lg sm:rounded-xl shadow-lg\"\n                    />\n                    <img\n                      src={makhanaProcessingImage}\n                      alt=\"Makhana farm\"\n                      className=\"w-full h-32 sm:h-48 object-cover rounded-lg sm:rounded-xl shadow-lg\"\n                    />\n                  </div>\n                </div>\n                \n                {/* Floating Achievement Card - Hidden on mobile for space */}\n                <div className=\"hidden sm:block absolute -bottom-6 -left-6 bg-white rounded-xl shadow-xl p-4 sm:p-6 border border-gray-100\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xl sm:text-2xl font-bold text-terracotta mb-1\">500+</div>\n                    <div className=\"text-xs sm:text-sm text-gray-600\">Farming Families</div>\n                    <div className=\"text-xs sm:text-sm text-gray-600\">Supported</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-8 sm:py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-6 sm:mb-12\">\n            <h3 className=\"font-display text-xl sm:text-3xl font-bold text-gray-900 mb-2 sm:mb-4\">\n              What Our Customers Say\n            </h3>\n            <p className=\"text-sm sm:text-base text-gray-600 hidden sm:block\">\n              Authentic experiences from our valued makhana customers\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-8\">\n            {[\n              {\n                name: \"Priya Sharma\",\n                location: \"Mumbai\",\n                content: \"The quality of makhana is exceptional. Each batch is truly fresh and perfectly processed.\",\n              },\n              {\n                name: \"Raj Patel\", \n                location: \"Ahmedabad\",\n                content: \"Makhana brings premium quality makhana to my home. The shipping was careful and the products arrived perfectly fresh.\",\n              },\n              {\n                name: \"Anita Singh\",\n                location: \"Delhi\",\n                content: \"Supporting makhana farmers while getting premium quality makhana. Couldn't be happier with my purchase!\",\n              },\n            ].map((testimonial, index) => (\n              <Card key={index} className=\"bg-warm-cream\">\n                <CardContent className=\"p-3 sm:p-6\">\n                  <div className=\"flex items-center mb-2 sm:mb-4\">\n                    <div className=\"flex text-saffron\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"h-3 w-3 sm:h-4 sm:w-4 fill-current\" />\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-gray-700 mb-3 sm:mb-4 text-sm sm:text-base\">\"{testimonial.content}\"</p>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-terracotta rounded-full flex items-center justify-center text-white font-semibold text-sm sm:text-base\">\n                      {testimonial.name[0]}\n                    </div>\n                    <div className=\"ml-2 sm:ml-3\">\n                      <p className=\"font-semibold text-gray-900 text-sm sm:text-base\">{testimonial.name}</p>\n                      <p className=\"text-gray-600 text-xs sm:text-sm\">{testimonial.location}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8 sm:py-12\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 sm:gap-8\">\n            <div className=\"col-span-2 md:col-span-1\">\n              <h4 className=\"font-display text-lg sm:text-xl font-semibold mb-2 sm:mb-4\">Makhana</h4>\n              <p className=\"text-gray-300 mb-3 sm:mb-4 text-sm sm:text-base\">\n                Preserving traditional makhana farming through authentic premium products.\n              </p>\n            </div>\n            \n            <div>\n              <h5 className=\"font-semibold mb-2 sm:mb-4 text-sm sm:text-base\">Categories</h5>\n              <ul className=\"space-y-1 sm:space-y-2 text-gray-300\">\n                {categories.map((category) => (\n                  <li key={category.id}>\n                    <Link href={`/products?category=${category.slug}`} className=\"hover:text-white text-xs sm:text-sm\">\n                      {category.name}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            \n            <div>\n              <h5 className=\"font-semibold mb-2 sm:mb-4 text-sm sm:text-base\">Customer Service</h5>\n              <ul className=\"space-y-1 sm:space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white text-xs sm:text-sm\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-white text-xs sm:text-sm\">Shipping Info</a></li>\n                <li><a href=\"#\" className=\"hover:text-white text-xs sm:text-sm\">Returns</a></li>\n                <li><a href=\"#\" className=\"hover:text-white text-xs sm:text-sm\">FAQ</a></li>\n              </ul>\n            </div>\n            \n            <div className=\"col-span-2 md:col-span-1\">\n              <h5 className=\"font-semibold mb-2 sm:mb-4 text-sm sm:text-base\">Newsletter</h5>\n              <p className=\"text-gray-300 mb-2 sm:mb-4 text-xs sm:text-sm\">\n                Subscribe for updates on new makhana varieties and farmer stories.\n              </p>\n              <div className=\"flex\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Your email\"\n                  className=\"flex-1 px-2 py-1 sm:px-3 sm:py-2 bg-gray-800 border border-gray-700 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-terracotta text-xs sm:text-sm\"\n                />\n                <Button className=\"bg-terracotta px-2 py-1 sm:px-4 sm:py-2 rounded-r-lg hover:bg-terracotta/90 text-xs sm:text-sm\">\n                  Subscribe\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-4 sm:mt-8 pt-4 sm:pt-8 text-center text-gray-300\">\n            <p className=\"text-xs sm:text-sm\">&copy; 2024 Makhana. All rights reserved. Preserving tradition, embracing modernity.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":27026},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getProduct, getRecommendedProducts, addToCart, getProductReviewStats } from \"@/lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { ChevronLeft, ChevronRight, Star, Plus, Minus, Heart, Share2, X, ArrowRight, ArrowLeft, ShoppingCart, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { Reviews } from \"@/components/reviews\";\n\nexport default function ProductDetail() {\n  const params = useParams();\n  const productId = parseInt(params.id as string);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [isFullscreenOpen, setIsFullscreenOpen] = useState(false);\n  const [fullscreenImageIndex, setFullscreenImageIndex] = useState(0);\n  const [isZooming, setIsZooming] = useState(false);\n  const [zoomMode, setZoomMode] = useState(false);\n  const [zoomPosition, setZoomPosition] = useState({ x: 0, y: 0 });\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  const [isBuyingNow, setIsBuyingNow] = useState(false);\n  const [isDescriptionExpanded, setIsDescriptionExpanded] = useState(false);\n  const [isFeaturesExpanded, setIsFeaturesExpanded] = useState(false);\n  const [isDetailsExpanded, setIsDetailsExpanded] = useState(false);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { addToCart, isAddingToCart } = useCart();\n  const { isAuthenticated } = useAuth();\n  const { isInWishlist, toggleWishlist } = useWishlist();\n  const { toast } = useToast();\n\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    queryFn: () => getProduct(productId),\n    enabled: !isNaN(productId),\n  });\n\n  // Get recommended products\n  const { data: recommendedProducts = [] } = useQuery({\n    queryKey: [\"/api/products\", productId, \"recommendations\"],\n    queryFn: () => getRecommendedProducts(productId),\n    enabled: !isNaN(productId) && !!product,\n  });\n\n  // Get review stats\n  const { data: reviewStats } = useQuery({\n    queryKey: [\"/api/products\", productId, \"review-stats\"],\n    queryFn: () => getProductReviewStats(productId),\n    enabled: !isNaN(productId) && !!product,\n  });\n\n  const handleAddToCart = () => {\n    if (!product) return;\n\n    addToCart({\n      productId: product.id,\n      quantity,\n    });\n\n    toast({\n      title: \"Added to cart\",\n      description: `${quantity} × ${product.name} added to your cart.`,\n    });\n  };\n\n  const handleQuantityChange = (newQuantity: number) => {\n    if (newQuantity >= 1 && newQuantity <= (product?.stock || 0)) {\n      setQuantity(newQuantity);\n    }\n  };\n\n  const handleImageDoubleClick = () => {\n    setFullscreenImageIndex(selectedImageIndex);\n    setIsFullscreenOpen(true);\n  };\n\n  const handleFullscreenPrevious = () => {\n    if (!product) return;\n    setFullscreenImageIndex(prev => \n      prev === 0 ? product.images.length - 1 : prev - 1\n    );\n  };\n\n  const handleFullscreenNext = () => {\n    if (!product) return;\n    setFullscreenImageIndex(prev => \n      prev === product.images.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!product) return;\n    if (e.key === 'ArrowLeft') {\n      handleFullscreenPrevious();\n    } else if (e.key === 'ArrowRight') {\n      handleFullscreenNext();\n    } else if (e.key === 'Escape') {\n      setIsFullscreenOpen(false);\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!containerRef.current || !imageRef.current || !zoomMode) return;\n\n    const container = containerRef.current;\n    const rect = container.getBoundingClientRect();\n    const x = ((e.clientX - rect.left) / rect.width) * 100;\n    const y = ((e.clientY - rect.top) / rect.height) * 100;\n\n    setZoomPosition({ x, y });\n  };\n\n  const handleMouseEnter = () => {\n    if (zoomMode) {\n      setIsZooming(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (zoomMode) {\n      setIsZooming(false);\n    }\n  };\n\n  const toggleZoomMode = () => {\n    setZoomMode(!zoomMode);\n    if (zoomMode) {\n      setIsZooming(false);\n    }\n  };\n\n  const handleWishlist = async () => {\n    if (!product) return;\n  \n    try {\n      await toggleWishlist(product.id);\n      // No need to manually update local storage or state here\n      // useWishlist hook handles it\n  \n      toast({\n        title: isInWishlist(product.id) ? \"Removed from Wishlist\" : \"Added to Wishlist\",\n        description: `${product.name} has been ${isInWishlist(product.id) ? 'removed from' : 'added to'} your wishlist.`,\n      });\n    } catch (error) {\n      console.error(\"Error toggling wishlist:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBuyNow = async () => {\n    if (!product) return;\n\n    setIsBuyingNow(true);\n\n    try {\n      // First add to cart\n      await addToCart({\n        productId: product.id,\n        quantity,\n      });\n\n      // Simulate processing time\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Redirect to cart page for immediate checkout\n      window.location.href = '/cart?checkout=true';\n\n      toast({\n        title: \"Redirecting to Checkout\",\n        description: `${quantity} × ${product.name} added to cart. Redirecting to checkout...`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process buy now. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsBuyingNow(false);\n    }\n  };\n\n  // Check if product is in wishlist on component mount\n  useEffect(() => {\n    if (product) {\n      const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');\n      const isInWishlist = existingWishlist.some((item: any) => item.id === product.id);\n      setIsWishlisted(isInWishlist);\n    }\n  }, [product]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-96 w-full\" />\n              <div className=\"grid grid-cols-4 gap-2\">\n                {[...Array(4)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-20 w-full\" />\n                ))}\n              </div>\n            </div>\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-6 w-1/2\" />\n              <Skeleton className=\"h-24 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Product Not Found</h1>\n            <p className=\"text-gray-600 mb-6\">\n              The product you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/products\">\n              <Button className=\"bg-terracotta hover:bg-terracotta/90\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Products\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream ethnic-pattern\">\n      <div className=\"max-w-7xl mx-auto px-2 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        {/* Traditional Breadcrumb */}\n        <div className=\"flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm text-henna mb-2 sm:mb-8 animate-fade-in overflow-x-auto bg-sandalwood/10 rounded-lg px-3 py-2 craft-border\">\n          <Link href=\"/\" className=\"hover:text-terracotta transition-colors duration-200 flex items-center flex-shrink-0 font-serif\">\n            <span className=\"text-saffron mr-1\">🏠</span>\n            <span className=\"hidden sm:inline\">Home</span>\n            <span className=\"sm:hidden\">Home</span>\n          </Link>\n          <span className=\"text-copper flex-shrink-0\">▸</span>\n          <Link href=\"/products\" className=\"hover:text-terracotta transition-colors duration-200 flex-shrink-0 hidden sm:inline font-serif\">Products</Link>\n          <span className=\"text-copper flex-shrink-0 hidden sm:inline\">▸</span>\n          <Link href={`/products?category=${product.category.slug}`} className=\"hover:text-terracotta transition-colors duration-200 flex-shrink-0 truncate max-w-[100px] sm:max-w-none font-serif\">\n            {product.category.name}\n          </Link>\n          <span className=\"text-copper flex-shrink-0\">▸</span>\n          <span className=\"text-henna font-medium truncate font-serif\">{product.name}</span>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-8 lg:gap-12 animate-fade-in-up\">\n          {/* Product Images */}\n          <div className=\"space-y-2 sm:space-y-6\">\n            {/* Main Image Container - Enhanced Indian Style */}\n            <div className=\"relative bg-gradient-to-br from-warm-cream to-sandalwood/20 rounded-xl sm:rounded-2xl overflow-hidden traditional-shadow craft-border paisley-pattern\">\n              {/* Image Counter */}\n              {product.images.length > 1 && (\n                <div className=\"absolute top-4 right-4 bg-henna/80 text-white text-sm px-3 py-1 rounded-full z-10 font-serif backdrop-blur-sm\">\n                  {selectedImageIndex + 1} / {product.images.length}\n                </div>\n              )}\n\n              {/* Badges */}\n              <div className=\"absolute top-4 left-4 flex flex-col space-y-2 z-10\">\n                {product.featured && (\n                  <Badge className=\"bg-saffron text-white\">\n                    Featured\n                  </Badge>\n                )}\n                {product.stock === 0 && (\n                  <Badge variant=\"destructive\">\n                    Out of Stock\n                  </Badge>\n                )}\n                {product.stock > 0 && product.stock <= 5 && (\n                  <Badge variant=\"outline\" className=\"text-orange-600 border-orange-600 bg-white\">\n                    Limited Stock\n                  </Badge>\n                )}\n              </div>\n\n              {/* Main Image */}\n              <div \n                ref={containerRef}\n                className={`relative aspect-[4/5] bg-gradient-to-br from-white via-gray-50 to-gray-100 group overflow-hidden ${\n                  zoomMode ? 'cursor-crosshair' : 'cursor-pointer'\n                }`}\n                onDoubleClick={handleImageDoubleClick}\n                onMouseMove={handleMouseMove}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n              >\n                <img\n                  ref={imageRef}\n                  src={product.images[selectedImageIndex] || \"/placeholder-image.jpg\"}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover transition-all duration-300 select-none\"\n                  style={{\n                    transform: isZooming ? `scale(2)` : 'scale(1)',\n                    transformOrigin: `${zoomPosition.x}% ${zoomPosition.y}%`,\n                  }}\n                  draggable={false}\n                />\n\n                {/* Zoom lens overlay */}\n                {isZooming && (\n                  <div \n                    className=\"absolute pointer-events-none border-2 border-white shadow-lg bg-black/10 rounded-full\"\n                    style={{\n                      width: '120px',\n                      height: '120px',\n                      left: `${zoomPosition.x}%`,\n                      top: `${zoomPosition.y}%`,\n                      transform: 'translate(-50%, -50%)',\n                      zIndex: 10,\n                    }}\n                  />\n                )}\n\n                {/* Hover overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/10 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n\n                {/* Zoom indicator */}\n                {zoomMode && (\n                  <div className=\"absolute bottom-4 right-4 bg-black/60 text-white text-xs px-3 py-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center z-20\">\n                    <svg className=\"h-3 w-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7\" />\n                    </svg>\n                    Hover to zoom\n                  </div>\n                )}\n\n                {/* Zoom mode indicator */}\n                {zoomMode && (\n                  <div className=\"absolute top-4 left-1/2 -translate-x-1/2 bg-terracotta/90 text-white text-xs px-3 py-1 rounded-full z-20 flex items-center\">\n                    <svg className=\"h-3 w-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7\" />\n                    </svg>\n                    Zoom Mode Active\n                  </div>\n                )}\n\n                {/* Navigation Arrows */}\n                {product.images.length > 1 && (\n                  <>\n                    <button\n                      onClick={() => setSelectedImageIndex(prev => \n                        prev === 0 ? product.images.length - 1 : prev - 1\n                      )}\n                      className=\"absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 w-12 h-12 sm:w-10 sm:h-10 bg-black/20 hover:bg-black/40 text-white rounded-full flex items-center justify-center transition-colors duration-200 z-30 touch-target\"\n                    >\n                      <ArrowLeft className=\"h-6 w-6 sm:h-5 sm:w-5\" />\n                    </button>\n                    <button\n                      onClick={() => setSelectedImageIndex(prev => \n                        prev === product.images.length - 1 ? 0 : prev + 1\n                      )}\n                      className=\"absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 w-12 h-12 sm:w-10 sm:h-10 bg-black/20 hover:bg-black/40 text-white rounded-full flex items-center justify-center transition-colors duration-200 z-30 touch-target\"\n                    >\n                      <ChevronRight className=\"h-6 w-6 sm:h-5 sm:w-5\" />\n                    </button>\n                  </>\n                )}\n              </div>\n\n              {/* Thumbnail Navigation - Enhanced Indian Style */}\n              {product.images.length > 1 && (\n                <div className=\"bg-gradient-to-r from-warm-cream via-sandalwood/10 to-warm-cream border-t-2 border-terracotta/20 p-2 sm:p-6 paisley-pattern\">\n                  <div className=\"flex space-x-1.5 sm:space-x-3 overflow-x-auto scrollbar-hide mobile-scroll\">\n                    {product.images.map((image, index) => (\n                      <button\n                        key={index}\n                        onClick={() => setSelectedImageIndex(index)}\n                        className={`flex-shrink-0 w-12 h-12 sm:w-20 sm:h-20 rounded-lg sm:rounded-xl overflow-hidden border-2 sm:border-3 transition-all duration-300 transform hover:scale-105 traditional-shadow touch-target ${\n                          selectedImageIndex === index\n                            ? \"border-saffron shadow-lg scale-105 ring-1 sm:ring-2 ring-saffron/30 bg-heritage-gradient p-0.5\"\n                            : \"border-terracotta/30 hover:border-terracotta craft-border\"\n                        }`}\n                      >\n                        <img\n                          src={image}\n                          alt={`${product.name} ${index + 1}`}\n                          className=\"w-full h-full object-cover transition-transform duration-200 rounded-md\"\n                        />\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"bg-gradient-to-r from-white to-gray-50 rounded-xl p-2 sm:p-4 border border-gray-100\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0\">\n                <div className=\"flex items-center space-x-2 sm:space-x-3 overflow-x-auto\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={toggleZoomMode}\n                    className={`transition-all duration-200 hover:scale-105 mobile-button-spacing touch-target flex-shrink-0 ${\n                      zoomMode \n                        ? 'bg-terracotta text-white border-terracotta hover:bg-terracotta/90' \n                        : 'hover:bg-terracotta hover:text-white'\n                    }`}\n                  >\n                    <svg className=\"h-4 w-4 mr-1 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7\" />\n                    </svg>\n                    <span className=\"hidden sm:inline\">{zoomMode ? 'Exit Zoom' : 'Zoom View'}</span>\n                    <span className=\"sm:hidden\">{zoomMode ? 'Exit' : 'Zoom'}</span>\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleWishlist}\n                    className={`transition-all duration-200 hover:scale-105 mobile-button-spacing touch-target flex-shrink-0 ${\n                      isInWishlist(product.id)\n                        ? 'bg-saffron text-white border-saffron hover:bg-saffron/90'\n                        : 'hover:bg-saffron hover:text-white'\n                    }`}\n                  >\n                    <Heart className={`h-4 w-4 mr-1 sm:mr-2 ${isInWishlist(product.id) ? 'fill-current' : ''}`} />\n                    <span className=\"hidden sm:inline\">{isInWishlist(product.id) ? 'Wishlisted' : 'Wishlist'}</span>\n                    <span className=\"sm:hidden\">{isInWishlist(product.id) ? '♥' : '♡'}</span>\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"hover:bg-sage hover:text-white transition-all duration-200 hover:scale-105 mobile-button-spacing touch-target flex-shrink-0\">\n                    <Share2 className=\"h-4 w-4 mr-1 sm:mr-2\" />\n                    <span className=\"hidden sm:inline\">Share</span>\n                  </Button>\n                </div>\n                <div className=\"hidden lg:flex items-center text-xs sm:text-sm text-gray-500 bg-gray-100 px-2 sm:px-3 py-1 rounded-full\">\n                  <svg className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                  {zoomMode ? 'Hover to zoom • Double-click for fullscreen' : 'Double-click for fullscreen'}\n                </div>\n              </div>\n            </div>\n\n            \n          </div>\n\n          {/* Product Info - Enhanced Indian Style */}\n          <div className=\"space-y-3 sm:space-y-8 animate-fade-in-up\" style={{ animationDelay: '0.2s' }}>\n            <div className=\"bg-gradient-to-br from-warm-cream to-sandalwood/20 rounded-xl sm:rounded-2xl p-3 sm:p-6 lg:p-8 craft-border traditional-shadow paisley-pattern\">\n              {/* Traditional Header with Category and SKU */}\n              <div className=\"flex items-center justify-between gap-2 mb-3 sm:mb-4\">\n                <Badge variant=\"outline\" className=\"bg-saffron/20 text-henna border-terracotta/30 px-3 py-1 text-xs font-serif\">\n                  🎨 {product.category.name}\n                </Badge>\n                <span className=\"text-xs text-copper bg-sandalwood/30 px-3 py-1 rounded-full font-serif\">\n                  {product.sku}\n                </span>\n              </div>\n\n              {/* Traditional Title */}\n              <h1 className=\"font-display text-lg sm:text-3xl lg:text-4xl font-bold text-henna mb-3 sm:mb-6 leading-tight\">\n                {product.name}\n              </h1>\n\n              {/* Stock Status */}\n              <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-2 sm:p-4 border border-green-200 mb-2 sm:mb-4\">\n                {product.stock > 0 ? (\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                      <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                        <div className=\"w-2 h-2 sm:w-3 sm:h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                        <Badge variant=\"outline\" className=\"text-green-700 border-green-500 bg-green-50 font-medium text-xs\">\n                          ✓ In Stock\n                        </Badge>\n                      </div>\n                      {product.stock <= 5 && (\n                        <div className=\"flex items-center space-x-1 sm:space-x-2 text-orange-600 bg-orange-50 px-2 sm:px-3 py-0.5 sm:py-1 rounded-full\">\n                          <svg className=\"h-3 w-3 sm:h-4 sm:w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                          </svg>\n                          <span className=\"text-xs sm:text-sm font-medium\">Only {product.stock} left!</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-xs sm:text-sm text-gray-600 hidden sm:block\">\n                      Fast shipping available\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <Badge variant=\"destructive\" className=\"font-medium\">Out of Stock</Badge>\n                  </div>\n                )}\n              </div>\n\n              {/* Traditional Price Section */}\n              <div className=\"flex items-baseline justify-between mb-4 sm:mb-6 bg-saffron/10 rounded-lg p-3 craft-border\">\n                <div className=\"flex items-baseline gap-2\">\n                  <span className=\"text-xl sm:text-3xl lg:text-4xl font-bold text-terracotta font-serif\">\n                    ₹{parseFloat(product.price).toLocaleString()}\n                  </span>\n                  <span className=\"text-sm text-copper line-through font-serif\">\n                    ₹{(parseFloat(product.price) * 1.2).toLocaleString()}\n                  </span>\n                </div>\n                <Badge className=\"bg-green-100 text-green-700 hover:bg-green-100 text-xs\">\n                  Save 20%\n                </Badge>\n              </div>\n\n              {/* Traditional Actions Section */}\n              {product.stock > 0 && (\n                <div className=\"bg-gradient-to-r from-saffron/10 to-turmeric/10 rounded-lg p-3 sm:p-4 craft-border traditional-shadow mb-4 sm:mb-6\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <span className=\"text-sm font-serif font-medium text-henna flex-shrink-0\">Quantity:</span>\n                    <div className=\"flex items-center bg-warm-cream rounded craft-border\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleQuantityChange(quantity - 1)}\n                        disabled={quantity <= 1}\n                        className=\"h-8 w-8 p-0 hover:bg-terracotta hover:text-white rounded-l text-xs font-serif\"\n                      >\n                        <Minus className=\"h-3 w-3\" />\n                      </Button>\n                      <span className=\"font-serif font-medium w-10 text-center text-sm bg-sandalwood/20 py-1.5 border-x border-terracotta/20\">\n                        {quantity}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleQuantityChange(quantity + 1)}\n                        disabled={quantity >= product.stock}\n                        className=\"h-8 w-8 p-0 hover:bg-terracotta hover:text-white rounded-r text-xs font-serif\"\n                      >\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-2 sm:gap-3\">\n                    <Button\n                      onClick={handleAddToCart}\n                      disabled={isAddingToCart}\n                      className=\"heritage-gradient hover:opacity-90 text-white text-xs py-2 h-8 sm:h-10 font-serif traditional-shadow\"\n                    >\n                      <ShoppingCart className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                      {isAddingToCart ? \"...\" : \"Add to Cart\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleWishlist}\n                      className={`border-terracotta text-terracotta hover:bg-terracotta hover:text-white text-xs py-2 h-8 sm:h-10 font-serif traditional-shadow ${\n                        isInWishlist(product.id) ? 'bg-terracotta text-white' : ''\n                      }`}\n                    >\n                      <Heart className={`h-3 w-3 sm:h-4 sm:w-4 mr-1 ${isInWishlist(product.id) ? 'fill-current' : ''}`} />\n                      {isInWishlist(product.id) ? \"💝\" : \"💖\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleBuyNow}\n                      disabled={isBuyingNow}\n                      className=\"border-saffron text-saffron hover:bg-saffron hover:text-white text-xs py-2 h-8 sm:h-10 font-serif traditional-shadow\"\n                    >\n                      {isBuyingNow ? \"...\" : \"Buy Now\"}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Compact Reviews */}\n              {reviewStats && reviewStats.totalReviews > 0 && (\n                <div className=\"flex items-center space-x-2 bg-saffron/10 px-2 py-1 rounded-full self-start\">\n                  <div className=\"flex items-center space-x-0.5\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star \n                        key={i} \n                        className={`h-3 w-3 sm:h-4 sm:w-4 ${\n                          i < Math.round(reviewStats.averageRating)\n                            ? \"fill-saffron text-saffron\"\n                            : \"text-gray-300\"\n                        }`} \n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-xs font-medium text-gray-700\">\n                    {reviewStats.averageRating}\n                  </span>\n                  <span className=\"text-xs text-gray-500\">\n                    ({reviewStats.totalReviews})\n                  </span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"bg-gradient-to-br from-white to-soft-beige/20 rounded-xl p-3 sm:p-6 border border-gray-100\">\n              <h3 className=\"font-semibold text-gray-900 mb-2 sm:mb-4 flex items-center text-sm sm:text-lg\">\n                <svg className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-terracotta\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                </svg>\n                Product Description\n              </h3>\n              <div className=\"space-y-3\">\n                <p className={`text-gray-700 leading-relaxed text-sm sm:text-base lg:text-lg transition-all duration-300 ${\n                  isDescriptionExpanded \n                    ? '' \n                    : 'line-clamp-3 sm:line-clamp-none'\n                }`}>\n                  {product.description}\n                </p>\n                \n                {/* Show More/Less button - only visible on mobile when description is long */}\n                {product.description && product.description.length > 150 && (\n                  <div className=\"block sm:hidden\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsDescriptionExpanded(!isDescriptionExpanded)}\n                      className=\"text-terracotta hover:text-terracotta/80 hover:bg-terracotta/10 p-0 h-auto font-medium\"\n                    >\n                      {isDescriptionExpanded ? (\n                        <>\n                          <span className=\"mr-1\">Show less</span>\n                          <ChevronUp className=\"h-4 w-4\" />\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"mr-1\">Show more details</span>\n                          <ChevronDown className=\"h-4 w-4\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Product Features */}\n            {product.features && product.features.length > 0 && (\n              <div className=\"bg-gradient-to-br from-sage/10 to-soft-beige/30 rounded-xl p-3 sm:p-6 border border-sage/20 backdrop-blur-sm\">\n                <h4 className=\"font-semibold text-gray-900 mb-2 sm:mb-4 flex items-center text-sm sm:text-lg\">\n                  <svg className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-sage\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  Key Features\n                </h4>\n\n                <div className=\"space-y-2\">\n                  <div className={`space-y-1.5 transition-all duration-300 ${\n                    isFeaturesExpanded \n                      ? '' \n                      : 'max-h-24 sm:max-h-none overflow-hidden'\n                  }`}>\n                    {product.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-start text-sm\">\n                        <div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-terracotta rounded-full mr-2 sm:mr-3 flex-shrink-0 mt-1\"></div>\n                        <span className=\"leading-tight\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Show More/Less button - only visible on mobile when features are many */}\n                  {product.features.length > 2 && (\n                    <div className=\"block sm:hidden\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setIsFeaturesExpanded(!isFeaturesExpanded)}\n                        className=\"text-sage hover:text-sage/80 hover:bg-sage/10 p-0 h-auto font-medium\"\n                      >\n                        {isFeaturesExpanded ? (\n                          <>\n                            <span className=\"mr-1\">Show less</span>\n                            <ChevronUp className=\"h-4 w-4\" />\n                          </>\n                        ) : (\n                          <>\n                            <span className=\"mr-1\">Show more features</span>\n                            <ChevronDown className=\"h-4 w-4\" />\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Product Details */}\n            <div className=\"bg-gradient-to-br from-white to-warm-cream/30 rounded-xl sm:rounded-2xl border border-gray-200 shadow-lg overflow-hidden\">\n              <div className=\"bg-gradient-to-r from-terracotta to-saffron p-3 sm:p-4 lg:p-6\">\n                <h3 className=\"font-semibold text-white text-lg sm:text-xl flex items-center\">\n                  <svg className=\"h-4 w-4 sm:h-5 sm:w-5 lg:h-6 lg:w-6 mr-2 sm:mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                  <span className=\"hidden sm:inline\">Product Details</span>\n                  <span className=\"sm:hidden\">Details</span>\n                </h3>\n              </div>\n              <div className=\"p-3 sm:p-4\">\n                <div className=\"space-y-2\">\n                  <div className={`space-y-1.5 transition-all duration-300 ${\n                    isDetailsExpanded \n                      ? '' \n                      : 'max-h-24 sm:max-h-none overflow-hidden'\n                  }`}>\n                    {[\n                      { label: \"Category\", value: product.category.name, icon: \"📂\" },\n                      { label: \"SKU\", value: product.sku, icon: \"🏷️\" },\n                      { label: \"Availability\", value: product.stock > 0 ? `${product.stock} in stock` : \"Out of stock\", icon: \"📦\" },\n                      { label: \"Handmade\", value: \"Yes\", icon: \"🎨\" },\n                      { label: \"Origin\", value: \"India\", icon: \"🇮🇳\" }\n                    ].map((detail, index) => (\n                      <div key={index} className=\"flex items-center justify-between py-1.5 px-2 sm:px-3 bg-gray-50/50 rounded-md hover:bg-gray-100/50 transition-colors duration-200\">\n                        <div className=\"flex items-center space-x-2 min-w-0 flex-1\">\n                          <span className=\"text-sm flex-shrink-0\">{detail.icon}</span>\n                          <span className=\"text-gray-700 font-medium text-xs sm:text-sm truncate\">{detail.label}:</span>\n                        </div>\n                        <span className=\"font-semibold text-gray-900 text-xs sm:text-sm ml-2 text-right flex-shrink-0\">{detail.value}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Show More/Less button - only visible on mobile */}\n                  <div className=\"block sm:hidden\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsDetailsExpanded(!isDetailsExpanded)}\n                      className=\"text-terracotta hover:text-terracotta/80 hover:bg-terracotta/10 p-0 h-auto font-medium\"\n                    >\n                      {isDetailsExpanded ? (\n                        <>\n                          <span className=\"mr-1\">Show less</span>\n                          <ChevronUp className=\"h-4 w-4\" />\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"mr-1\">Show more details</span>\n                          <ChevronDown className=\"h-4 w-4\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Trust Badges */}\n                <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                  <div className=\"grid grid-cols-2 gap-1.5 sm:gap-2\">\n                    <div className=\"flex items-center space-x-1 text-xs text-gray-600 bg-green-50 px-2 py-1 rounded-md\">\n                      <svg className=\"h-3 w-3 text-green-500 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                      </svg>\n                      <span className=\"truncate\">Authentic</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-xs text-gray-600 bg-blue-50 px-2 py-1 rounded-md\">\n                      <svg className=\"h-3 w-3 text-blue-500 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                      </svg>\n                      <span className=\"truncate\">Fast Delivery</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Reviews Section */}\n        <div className=\"mt-8 sm:mt-16 border-t pt-6 sm:pt-12\">\n          <Reviews productId={productId} />\n        </div>\n\n        {/* Recommended Products Section */}\n        {recommendedProducts.length > 0 && (\n          <div className=\"mt-8 sm:mt-16 border-t pt-6 sm:pt-12\">\n            <div className=\"mb-4 sm:mb-8\">\n              <h2 className=\"font-display text-lg sm:text-2xl font-bold text-gray-900 mb-1 sm:mb-2\">\n                You might also like\n              </h2>\n              <p className=\"text-sm sm:text-base text-gray-600 hidden sm:block\">\n                Products with similar features and from related categories\n              </p>\n            </div>\n\n            {/* Same Category Products */}\n            {recommendedProducts.filter(p => p.categoryId === product.categoryId).length > 0 && (\n              <div className=\"mb-6 sm:mb-12\">\n                <h3 className=\"font-semibold text-sm sm:text-lg text-gray-900 mb-2 sm:mb-4 flex items-center flex-wrap\">\n                  <Badge variant=\"outline\" className=\"mr-1 sm:mr-2 text-xs\">{product.category.name}</Badge>\n                  <span className=\"text-xs sm:text-base\">More from this category</span>\n                </h3>\n                <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-1.5 sm:gap-3 lg:gap-6\">\n                  {recommendedProducts\n                    .filter(p => p.categoryId === product.categoryId)\n                    .slice(0, 4)\n                    .map((recommendedProduct) => (\n                      <ProductCard \n                        key={recommendedProduct.id} \n                        product={recommendedProduct} \n                        showCategory={false}\n                      />\n                    ))}\n                </div>\n              </div>\n            )}\n\n            {/* Similar Features Products */}\n            {recommendedProducts.filter(p => p.categoryId !== product.categoryId).length > 0 && (\n              <div className=\"mb-4 sm:mb-8\">\n                <h3 className=\"font-semibold text-sm sm:text-lg text-gray-900 mb-2 sm:mb-4 flex items-center flex-wrap\">\n                  <Badge variant=\"outline\" className=\"mr-1 sm:mr-2 bg-saffron/10 text-saffron border-saffron text-xs\">Similar Features</Badge>\n                  <span className=\"text-xs sm:text-base\">Products with similar characteristics</span>\n                </h3>\n                <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-1.5 sm:gap-3 lg:gap-6\">\n                  {recommendedProducts\n                    .filter(p => p.categoryId !== product.categoryId)\n                    .slice(0, 4)\n                    .map((recommendedProduct) => (\n                      <ProductCard \n                        key={recommendedProduct.id} \n                        product={recommendedProduct} \n                        showCategory={true}\n                      />\n                    ))}\n                </div>\n              </div>\n            )}\n\n            {/* View More Links */}\n            <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 justify-center\">\n              <Link href={`/products?category=${product?.category?.slug}`}>\n                <Button variant=\"outline\" className=\"border-terracotta text-terracotta hover:bg-terracotta hover:text-white text-sm py-2 w-full sm:w-auto\">\n                  View all {product?.category?.name}\n                  <ArrowRight className=\"h-3 w-3 sm:h-4 sm:w-4 ml-1 sm:ml-2\" />\n                </Button>\n              </Link>\n              <Link href=\"/products\">\n                <Button variant=\"outline\" className=\"border-gray-300 text-gray-700 hover:bg-gray-50 text-sm py-2 w-full sm:w-auto\">\n                  Browse all products\n                  <ArrowRight className=\"h-3 w-3 sm:h-4 sm:w-4 ml-1 sm:ml-2\" />\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )}\n\n        {/* Fullscreen Image Modal */}\n        <Dialog open={isFullscreenOpen} onOpenChange={setIsFullscreenOpen}>\n          <DialogContent className=\"max-w-full max-h-full w-screen h-screen p-0 bg-black/95 border-none\" onKeyDown={handleKeyDown}>\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              {/* Close Button */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute top-4 right-4 z-50 bg-black/20 hover:bg-black/40 text-white rounded-full w-12 h-12\"\n                onClick={() => setIsFullscreenOpen(false)}\n              >\n                <X className=\"h-6 w-6\" />\n              </Button>\n\n              {/* Image Counter */}\n              {product && product.images.length > 1 && (\n                <div className=\"absolute top-4 left-1/2 -translate-x-1/2 bg-black/60 text-white px-4 py-2 rounded-full z-50\">\n                  {fullscreenImageIndex + 1} / {product.images.length}\n                </div>\n              )}\n\n              {/* Navigation Arrows */}\n              {product && product.images.length > 1 && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute left-4 top-1/2 -translate-y-1/2 z-50 bg-black/20 hover:bg-black/40 text-white rounded-full w-16 h-16\"\n                    onClick={handleFullscreenPrevious}\n                  >\n                    <ChevronLeft className=\"h-8 w-8\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-4 top-1/2 -translate-y-1/2 z-50 bg-black/20 hover:bg-black/40 text-white rounded-full w-16 h-16\"\n                    onClick={handleFullscreenNext}\n                  >\n                    <ChevronRight className=\"h-8 w-8\" />\n                  </Button>\n                </>\n              )}\n\n              {/* Main Fullscreen Image */}\n              <div className=\"w-full h-full flex items-center justify-center p-4 sm:p-8\">\n                <img\n                  src={product?.images[fullscreenImageIndex] || \"/placeholder-image.jpg\"}\n                  alt={product?.name}\n                  className=\"max-w-[95vw] max-h-[80vh] sm:max-w-[90vw] sm:max-h-[85vh] w-auto h-auto object-contain\"\n                />\n              </div>\n\n              {/* Thumbnail Navigation */}\n              {product && product.images.length > 1 && (\n                <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2 bg-black/60 p-2 sm:p-3 rounded-full max-w-[95vw] overflow-x-auto scrollbar-hide\">\n                  {product.images.map((image, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setFullscreenImageIndex(index)}\n                      className={`flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 rounded-lg overflow-hidden border-2 transition-all duration-200 ${\n                        fullscreenImageIndex === index\n                          ? \"border-white\"\n                          : \"border-gray-500 hover:border-gray-300\"\n                      }`}\n                    >\n                      <img\n                        src={image}\n                        alt={`${product.name} ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </button>\n                  ))}\n                </div>\n              )}\n\n              {/* Instructions */}\n              <div className=\"absolute bottom-16 sm:bottom-20 left-1/2 -translate-x-1/2 text-white/70 text-xs sm:text-sm text-center px-4\">\n                <p>Use arrow keys to navigate • Press ESC to close</p>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":46007},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Filter, Search, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { getProducts, getCategories } from \"@/lib/api\";\n\nexport default function Products() {\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  \n  // Parse URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const category = params.get(\"category\") || \"\";\n    const search = params.get(\"search\") || \"\";\n    \n    setSelectedCategory(category);\n    setSearchQuery(search);\n  }, [location]);\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: getCategories,\n  });\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\", { category: selectedCategory, search: searchQuery }],\n    queryFn: () => getProducts({ \n      category: selectedCategory || undefined, \n      search: searchQuery || undefined \n    }),\n  });\n\n  // Sort products\n  const sortedProducts = [...products].sort((a, b) => {\n    switch (sortBy) {\n      case \"price-low\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"price-high\":\n        return parseFloat(b.price) - parseFloat(a.price);\n      case \"name\":\n      default:\n        return a.name.localeCompare(b.name);\n    }\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateURL();\n  };\n\n  const updateURL = () => {\n    const params = new URLSearchParams();\n    if (selectedCategory) params.set(\"category\", selectedCategory);\n    if (searchQuery) params.set(\"search\", searchQuery);\n    \n    const newURL = `/products${params.toString() ? `?${params}` : \"\"}`;\n    window.history.pushState({}, \"\", newURL);\n  };\n\n  const clearFilters = () => {\n    setSelectedCategory(\"\");\n    setSearchQuery(\"\");\n    window.history.pushState({}, \"\", \"/products\");\n  };\n\n  const hasFilters = selectedCategory || searchQuery;\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        {/* Header */}\n        <div className=\"mb-4 sm:mb-8\">\n          <h1 className=\"font-display text-xl sm:text-3xl font-bold text-gray-900 mb-2 sm:mb-4\">\n            Premium Makhana Collection\n          </h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">\n            Discover authentic makhana varieties processed by skilled farmers across India\n          </p>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"mb-4 sm:mb-8\">\n          {/* Mobile Layout */}\n          <div className=\"block sm:hidden space-y-3\">\n            {/* Search - Full width on mobile */}\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search makhana...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n              <Search className=\"h-4 w-4 text-gray-500 absolute left-3 top-1/2 -translate-y-1/2\" />\n            </form>\n\n            {/* Filters Row - Category and Sort side by side */}\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Select\n                value={selectedCategory || \"all\"}\n                onValueChange={(value) => {\n                  setSelectedCategory(value === \"all\" ? \"\" : value);\n                  setTimeout(updateURL, 0);\n                }}\n              >\n                <SelectTrigger className=\"text-xs\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.slug}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name A-Z</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Desktop Layout */}\n          <div className=\"hidden sm:flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              {/* Search */}\n              <form onSubmit={handleSearch} className=\"relative flex-1 max-w-md\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search makhana...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pr-10\"\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"absolute right-0 top-0 h-full px-3\"\n                >\n                  <Search className=\"h-4 w-4\" />\n                </Button>\n              </form>\n\n              {/* Category Filter */}\n              <Select\n                value={selectedCategory || \"all\"}\n                onValueChange={(value) => {\n                  setSelectedCategory(value === \"all\" ? \"\" : value);\n                  setTimeout(updateURL, 0);\n                }}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.slug}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Sort */}\n            <div className=\"flex items-center gap-4\">\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name A-Z</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {hasFilters && (\n            <div className=\"flex flex-wrap items-center gap-1 sm:gap-2 mt-3 sm:mt-4\">\n              <span className=\"text-xs sm:text-sm text-gray-600\">Filters:</span>\n              {selectedCategory && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1 text-xs\">\n                  {categories.find(c => c.slug === selectedCategory)?.name}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer\" \n                    onClick={() => {\n                      setSelectedCategory(\"\");\n                      setTimeout(updateURL, 0);\n                    }}\n                  />\n                </Badge>\n              )}\n              {searchQuery && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1 text-xs\">\n                  \"{searchQuery}\"\n                  <X \n                    className=\"h-3 w-3 cursor-pointer\" \n                    onClick={() => {\n                      setSearchQuery(\"\");\n                      setTimeout(updateURL, 0);\n                    }}\n                  />\n                </Badge>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearFilters}\n                className=\"text-terracotta hover:text-terracotta/80 text-xs px-2 py-1 h-auto\"\n              >\n                Clear\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"mb-3 sm:mb-6\">\n          <p className=\"text-xs sm:text-base text-gray-600\">\n            {isLoading ? \"Loading...\" : `${sortedProducts.length} products found`}\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 sm:gap-4 lg:gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"space-y-2\">\n                <Skeleton className=\"h-32 sm:h-40 lg:h-48 w-full\" />\n                <Skeleton className=\"h-3 sm:h-4 w-3/4\" />\n                <Skeleton className=\"h-3 sm:h-4 w-1/2\" />\n                <Skeleton className=\"h-6 sm:h-8 w-full\" />\n              </div>\n            ))}\n          </div>\n        ) : sortedProducts.length === 0 ? (\n          <div className=\"text-center py-8 sm:py-12\">\n            <div className=\"text-gray-400 mb-4\">\n              <svg className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m13-8l-4 4m0 0l-4-4m4 4V3\" />\n              </svg>\n            </div>\n            <h3 className=\"text-base sm:text-lg font-medium text-gray-900 mb-2\">No products found</h3>\n            <p className=\"text-sm sm:text-base text-gray-600 mb-4 px-4\">\n              Try adjusting your search criteria or browse all products.\n            </p>\n            <Button onClick={clearFilters} className=\"bg-terracotta hover:bg-terracotta/90 text-sm sm:text-base\">\n              View All Products\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 sm:gap-4 lg:gap-6\">\n              {sortedProducts.map((product) => (\n                <ProductCard key={product.id} product={product} showCategory />\n              ))}\n            </div>\n\n            {/* Recommended Products Section - Compact for Mobile */}\n            {!selectedCategory && !searchQuery && (\n              <div className=\"mt-6 sm:mt-12 border-t pt-4 sm:pt-8\">\n                <div className=\"mb-3 sm:mb-6\">\n                  <h2 className=\"font-display text-base sm:text-xl font-bold text-gray-900 mb-1\">\n                    You might also like\n                  </h2>\n                  <p className=\"text-xs sm:text-base text-gray-600 hidden sm:block\">\n                    Discover more premium makhana varieties from our farmers\n                  </p>\n                </div>\n                \n                {/* Mobile: Horizontal scroll, Desktop: Grid */}\n                <div className=\"sm:hidden\">\n                  <div className=\"flex space-x-2 overflow-x-auto pb-2 scrollbar-hide\">\n                    {products\n                      .filter(product => product.featured)\n                      .slice(0, 6)\n                      .map((product) => (\n                        <div key={`featured-mobile-${product.id}`} className=\"flex-shrink-0 w-36\">\n                          <ProductCard product={product} showCategory />\n                        </div>\n                      ))}\n                  </div>\n                </div>\n                \n                {/* Desktop: Normal Grid */}\n                <div className=\"hidden sm:grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6\">\n                  {products\n                    .filter(product => product.featured)\n                    .slice(0, 4)\n                    .map((product) => (\n                      <ProductCard key={`featured-desktop-${product.id}`} product={product} showCategory />\n                    ))}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12906},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Package, Clock, CheckCircle, Truck, X, Eye, User, Mail, Calendar, ShoppingBag, Star, Award, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { getOrders } from \"@/lib/api\";\n\nexport default function Profile() {\n  const { user, isAuthenticated } = useAuth();\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const { wishlistItems, isLoading: isWishlistLoading, toggleWishlist } = useWishlist();\n\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: getOrders,\n    enabled: isAuthenticated,\n  });\n\n  // Filter orders for current user\n  const userOrders = orders.filter(order => order.userId === user?.id);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"h-4 w-4\" />;\n      case \"confirmed\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"shipped\":\n        return <Truck className=\"h-4 w-4\" />;\n      case \"delivered\":\n        return <Package className=\"h-4 w-4\" />;\n      case \"cancelled\":\n        return <X className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"confirmed\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"shipped\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Please Log In</h1>\n            <p className=\"text-gray-600 mb-6\">\n              You need to be logged in to view your profile.\n            </p>\n            <Link href=\"/login\">\n              <Button className=\"bg-terracotta hover:bg-terracotta/90\">\n                Go to Login\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-terracotta font-display mb-2\">My Profile</h1>\n          <p className=\"text-gray-600\">Manage your account and view your orders</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* User Info */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"border-terracotta/20 shadow-lg bg-white mb-6\">\n              <CardHeader className=\"bg-gradient-to-r from-terracotta/10 to-saffron/10 rounded-t-lg border-b border-terracotta/20\">\n                <CardTitle className=\"flex items-center text-terracotta font-display\">\n                  <User className=\"h-5 w-5 mr-2\" />\n                  Profile Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">Full Name</Label>\n                    <p className=\"text-lg font-semibold text-gray-900\">{user?.name}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">Email</Label>\n                    <p className=\"text-gray-700 flex items-center\">\n                      <Mail className=\"h-4 w-4 mr-2 text-terracotta\" />\n                      {user?.email}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">Member Since</Label>\n                    <p className=\"text-gray-700 flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2 text-terracotta\" />\n                      {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Recently'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Wishlist Preview */}\n            <Card className=\"border-terracotta/20 shadow-lg bg-white\">\n              <CardHeader className=\"bg-gradient-to-r from-saffron/10 to-warm-gold/10 rounded-t-lg border-b border-saffron/20\">\n                <CardTitle className=\"flex items-center justify-between text-saffron font-display\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Star className=\"h-5 w-5\" />\n                    <span>My Wishlist ({wishlistItems.length})</span>\n                  </div>\n                  {wishlistItems.length > 0 && (\n                    <Link href=\"/wishlist\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-saffron text-saffron hover:bg-saffron hover:text-white\">\n                        View All\n                      </Button>\n                    </Link>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {isWishlistLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-saffron mx-auto mb-4\"></div>\n                    <p className=\"text-gray-600\">Loading wishlist...</p>\n                  </div>\n                ) : wishlistItems.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"bg-gradient-to-br from-saffron/10 to-warm-gold/10 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4 border border-saffron/20\">\n                      <Star className=\"w-8 h-8 text-saffron\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2 font-display\">No favorites yet</h3>\n                    <p className=\"text-gray-600 text-sm mb-4\">\n                      Start adding products you love to your wishlist\n                    </p>\n                    <Link href=\"/products\">\n                      <Button className=\"bg-gradient-to-r from-saffron to-warm-gold hover:from-saffron/90 hover:to-warm-gold/90 text-white px-6 py-2 rounded-lg font-medium shadow-md transition-all duration-200 hover:shadow-lg\">\n                        Browse Products\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div>\n                    <div className=\"space-y-2 sm:space-y-3 max-h-48 sm:max-h-64 overflow-y-auto\">\n                      {wishlistItems.slice(0, 3).map((item) => (\n                        <div key={item.id} className=\"flex items-center space-x-2 sm:space-x-3 p-2 sm:p-3 bg-gradient-to-r from-saffron/5 to-warm-gold/5 rounded-lg border border-saffron/10 hover:border-saffron/20 transition-all duration-200\">\n                          <img\n                            src={item.images?.[0] || '/placeholder-image.jpg'}\n                            alt={item.name}\n                            className=\"w-10 h-10 sm:w-12 sm:h-12 object-cover rounded-lg border border-saffron/20 flex-shrink-0\"\n                          />\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-medium text-gray-900 text-xs sm:text-sm truncate\">{item.name}</h4>\n                            <p className=\"text-terracotta font-semibold text-xs sm:text-sm\">₹{parseFloat(item.price).toLocaleString()}</p>\n                          </div>\n                          <div className=\"flex items-center space-x-1 sm:space-x-2 flex-shrink-0\">\n                            <Link href={`/products/${item.id}`}>\n                              <Button variant=\"outline\" size=\"sm\" className=\"text-xs border-gray-300 hover:bg-gray-50 px-2 py-1\">\n                                View\n                              </Button>\n                            </Link>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleWishlist(item.id)}\n                              className=\"text-red-500 hover:bg-red-50 p-1\"\n                            >\n                              <svg className=\"h-3 w-3 sm:h-4 sm:w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                              </svg>\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    {wishlistItems.length > 3 && (\n                      <div className=\"text-center pt-3 border-t border-saffron/10\">\n                        <Link href=\"/wishlist\">\n                          <Button variant=\"outline\" className=\"border-saffron text-saffron hover:bg-saffron hover:text-white\">\n                            View {wishlistItems.length - 3} More Items\n                          </Button>\n                        </Link>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Orders List */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border-terracotta/20 shadow-lg bg-white\">\n              <CardHeader className=\"bg-gradient-to-r from-terracotta/10 to-saffron/10 rounded-t-lg border-b border-terracotta/20\">\n                <CardTitle className=\"flex items-center justify-between text-terracotta font-display\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Package className=\"h-5 w-5\" />\n                    <span>My Orders ({userOrders.length})</span>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-terracotta mx-auto mb-4\"></div>\n                    <p className=\"text-gray-600\">Loading your orders...</p>\n                  </div>\n                ) : userOrders.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"bg-gradient-to-br from-terracotta/10 to-saffron/10 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6 border border-terracotta/20\">\n                      <Package className=\"w-12 h-12 text-terracotta\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-3 font-display\">No orders yet</h3>\n                    <p className=\"text-gray-600 mb-8 max-w-sm mx-auto\">\n                      Start your journey with premium makhana. Explore our beautiful collection of natural snacks.\n                    </p>\n                    <Link href=\"/products\">\n                      <Button className=\"bg-gradient-to-r from-terracotta to-saffron hover:from-terracotta/90 hover:to-saffron/90 text-white px-8 py-3 rounded-lg font-medium shadow-lg transition-all duration-200 hover:shadow-xl\">\n                        Start Shopping\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"space-y-6\">\n                    {userOrders.map((order) => (\n                      <div key={order.id} className=\"relative overflow-hidden rounded-lg sm:rounded-xl border border-terracotta/20 bg-white hover:shadow-xl transition-all duration-300 group hover:border-terracotta/40\">\n                        <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-terracotta to-saffron\"></div>\n                        <div className=\"p-3 sm:p-6\">\n                          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-3 sm:mb-4 space-y-2 sm:space-y-0\">\n                            <div className=\"flex items-center space-x-2 sm:space-x-4 min-w-0 flex-1\">\n                              <div className=\"flex items-center space-x-2 min-w-0 flex-1\">\n                                <div className={`p-1.5 sm:p-2 rounded-full flex-shrink-0 ${\n                                  order.status === \"delivered\" ? \"bg-green-100 text-green-600\" :\n                                  order.status === \"shipped\" ? \"bg-blue-100 text-blue-600\" :\n                                  order.status === \"confirmed\" ? \"bg-purple-100 text-purple-600\" :\n                                  order.status === \"cancelled\" ? \"bg-red-100 text-red-600\" : \"bg-yellow-100 text-yellow-600\"\n                                }`}>\n                                  {getStatusIcon(order.status)}\n                                </div>\n                                <div className=\"min-w-0 flex-1\">\n                                  <h3 className=\"font-semibold text-gray-900 font-display text-sm sm:text-base\">Order #{order.id}</h3>\n                                  <p className=\"text-xs sm:text-sm text-gray-600\">\n                                    {new Date(order.createdAt).toLocaleDateString()}\n                                  </p>\n                                </div>\n                              </div>\n                              <Badge className={`${getStatusColor(order.status)} px-2 sm:px-3 py-1 text-xs font-medium rounded-full flex-shrink-0`}>\n                                {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                              </Badge>\n                            </div>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"border-terracotta text-terracotta hover:bg-terracotta hover:text-white transition-all duration-200 hover:shadow-md\"\n                                  onClick={() => setSelectedOrder(order)}\n                                >\n                                  <Eye className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                                  <span className=\"text-xs sm:text-sm\">View Details</span>\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"sm:max-w-[700px] max-h-[80vh] overflow-y-auto bg-gradient-to-br from-warm-cream to-soft-beige\">\n                                <DialogHeader className=\"border-b border-terracotta/20 pb-4\">\n                                  <DialogTitle className=\"text-2xl font-bold text-terracotta font-display flex items-center\">\n                                    <Package className=\"h-6 w-6 mr-2\" />\n                                    Order Details\n                                  </DialogTitle>\n                                  <DialogDescription className=\"text-gray-600\">\n                                    Complete information about your order\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <div className=\"space-y-6 pt-6\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label className=\"text-sm font-medium text-gray-700\">Order ID</Label>\n                                      <p className=\"text-lg font-semibold text-terracotta\">#{order.id}</p>\n                                    </div>\n                                    <div>\n                                      <Label className=\"text-sm font-medium text-gray-700\">Status</Label>\n                                      <Badge className={`${getStatusColor(order.status)} px-3 py-1 text-sm font-medium rounded-full mt-1`}>\n                                        {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                                      </Badge>\n                                    </div>\n                                  </div>\n                                  \n                                  <Separator className=\"bg-terracotta/20\" />\n                                  \n                                  <div>\n                                    <Label className=\"text-lg font-semibold text-gray-900 mb-3 block\">Order Summary</Label>\n                                    <div className=\"bg-white rounded-lg p-4 border border-terracotta/20\">\n                                      <div className=\"flex justify-between items-center mb-2\">\n                                        <span className=\"text-lg font-semibold\">Total Amount</span>\n                                        <span className=\"text-3xl font-bold text-terracotta\">₹{parseFloat(order.total).toLocaleString()}</span>\n                                      </div>\n                                      <p className=\"text-sm text-gray-600\">\n                                        Ordered on {new Date(order.createdAt).toLocaleDateString()}\n                                      </p>\n                                    </div>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-6\">\n                            <div className=\"bg-soft-beige rounded-lg p-2 sm:p-4 border border-terracotta/10\">\n                              <p className=\"text-xs sm:text-sm font-medium text-gray-600 mb-1\">Tracking Number</p>\n                              <p className=\"font-mono text-xs sm:text-sm bg-white px-2 py-1 rounded border border-terracotta/20 text-terracotta truncate\">{order.trackingNumber}</p>\n                            </div>\n                            <div className=\"bg-soft-beige rounded-lg p-2 sm:p-4 border border-terracotta/10\">\n                              <p className=\"text-xs sm:text-sm font-medium text-gray-600 mb-1\">Total Amount</p>\n                              <p className=\"text-lg sm:text-xl font-bold text-terracotta\">₹{parseFloat(order.total).toLocaleString()}</p>\n                            </div>\n                            <div className=\"bg-soft-beige rounded-lg p-2 sm:p-4 border border-terracotta/10\">\n                              <p className=\"text-xs sm:text-sm font-medium text-gray-600 mb-1\">Order Date</p>\n                              <p className=\"font-medium text-gray-900 text-sm sm:text-base\">{new Date(order.createdAt).toLocaleDateString()}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20402},"client/src/pages/track-order.tsx":{"content":"\nimport React, { useState } from \"react\";\nimport { Search, Package, Truck, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { trackOrder } from \"@/lib/api\";\n\nconst statusIcons = {\n  pending: <Clock className=\"h-5 w-5 text-yellow-600\" />,\n  confirmed: <Package className=\"h-5 w-5 text-blue-600\" />,\n  shipped: <Truck className=\"h-5 w-5 text-purple-600\" />,\n  delivered: <CheckCircle className=\"h-5 w-5 text-green-600\" />,\n  cancelled: <XCircle className=\"h-5 w-5 text-red-600\" />,\n};\n\nconst statusColors = {\n  pending: \"bg-yellow-100 text-yellow-800\",\n  confirmed: \"bg-blue-100 text-blue-800\",\n  shipped: \"bg-purple-100 text-purple-800\",\n  delivered: \"bg-green-100 text-green-800\",\n  cancelled: \"bg-red-100 text-red-800\",\n};\n\nexport default function TrackOrder() {\n  const [trackingNumber, setTrackingNumber] = useState(\"\");\n  const [orderInfo, setOrderInfo] = useState<any>(null);\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleTrack = async () => {\n    if (!trackingNumber.trim()) {\n      setError(\"Please enter a tracking number\");\n      return;\n    }\n\n    setIsTracking(true);\n    setError(\"\");\n    setOrderInfo(null);\n\n    try {\n      const result = await trackOrder(trackingNumber.trim());\n      setOrderInfo(result);\n    } catch (err: any) {\n      setError(err.message || \"Order not found\");\n    } finally {\n      setIsTracking(false);\n    }\n  };\n\n  const getStatusSteps = (currentStatus: string) => {\n    const steps = [\n      { key: \"pending\", label: \"Order Placed\", description: \"Your order has been received\" },\n      { key: \"confirmed\", label: \"Confirmed\", description: \"Order confirmed and being prepared\" },\n      { key: \"shipped\", label: \"Shipped\", description: \"Order is on its way\" },\n      { key: \"delivered\", label: \"Delivered\", description: \"Order has been delivered\" },\n    ];\n\n    const statusOrder = [\"pending\", \"confirmed\", \"shipped\", \"delivered\"];\n    const currentIndex = statusOrder.indexOf(currentStatus);\n\n    return steps.map((step, index) => ({\n      ...step,\n      completed: index <= currentIndex,\n      active: index === currentIndex,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Track Your Order</h1>\n          <p className=\"text-lg text-gray-600\">\n            Enter your tracking number to see the current status of your order\n          </p>\n        </div>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Enter Tracking Number</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"tracking\">Tracking Number</Label>\n              <div className=\"flex space-x-2 mt-1\">\n                <Input\n                  id=\"tracking\"\n                  value={trackingNumber}\n                  onChange={(e) => setTrackingNumber(e.target.value.toUpperCase())}\n                  placeholder=\"Enter your tracking number (e.g., TRKXXXXXXXX)\"\n                  className=\"font-mono\"\n                  onKeyPress={(e) => e.key === 'Enter' && handleTrack()}\n                />\n                <Button onClick={handleTrack} disabled={isTracking}>\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  {isTracking ? \"Tracking...\" : \"Track\"}\n                </Button>\n              </div>\n              {error && (\n                <p className=\"text-sm text-red-600 mt-2\">{error}</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {orderInfo && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Order Details</span>\n                  <Badge className={statusColors[orderInfo.status as keyof typeof statusColors]}>\n                    {statusIcons[orderInfo.status as keyof typeof statusIcons]}\n                    <span className=\"ml-2 capitalize\">{orderInfo.status}</span>\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Order ID</Label>\n                    <p className=\"text-lg font-medium\">#{orderInfo.id}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Tracking Number</Label>\n                    <p className=\"text-lg font-mono\">{orderInfo.trackingNumber}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Customer</Label>\n                    <p className=\"text-lg\">{orderInfo.customerName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Order Total</Label>\n                    <p className=\"text-lg font-medium\">₹{parseFloat(orderInfo.total).toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Order Date</Label>\n                    <p className=\"text-lg\">{new Date(orderInfo.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {orderInfo.status !== \"cancelled\" && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {getStatusSteps(orderInfo.status).map((step, index) => (\n                      <div key={step.key} className=\"flex items-start\">\n                        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n                          step.completed \n                            ? 'bg-terracotta text-white' \n                            : step.active \n                              ? 'bg-terracotta/20 text-terracotta border-2 border-terracotta'\n                              : 'bg-gray-200 text-gray-400'\n                        }`}>\n                          {step.completed ? (\n                            <CheckCircle className=\"h-5 w-5\" />\n                          ) : (\n                            <span className=\"text-sm font-medium\">{index + 1}</span>\n                          )}\n                        </div>\n                        <div className=\"ml-4 flex-1\">\n                          <h3 className={`text-lg font-medium ${\n                            step.completed || step.active ? 'text-gray-900' : 'text-gray-400'\n                          }`}>\n                            {step.label}\n                          </h3>\n                          <p className={`text-sm ${\n                            step.completed || step.active ? 'text-gray-600' : 'text-gray-400'\n                          }`}>\n                            {step.description}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7937},"client/src/pages/wishlist.tsx":{"content":"\nimport { Heart, ArrowLeft, Trash2, ShoppingCart, Plus } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Wishlist() {\n  const { isAuthenticated } = useAuth();\n  const { wishlistItems, isLoading, toggleWishlist } = useWishlist();\n  const { addToCart, isAddingToCart } = useCart();\n  const { toast } = useToast();\n\n  const addToCartFromWishlist = (item: any) => {\n    addToCart({\n      productId: item.id,\n      quantity: 1,\n    });\n\n    toast({\n      title: \"Added to Cart\",\n      description: `${item.name} has been added to your cart.`,\n    });\n  };\n\n  const clearWishlist = () => {\n    // Remove all items from wishlist\n    wishlistItems.forEach(item => {\n      toggleWishlist(item.id);\n    });\n    \n    toast({\n      title: \"Wishlist Cleared\",\n      description: \"All items have been removed from your wishlist.\",\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"text-center\">\n            <h1 className=\"font-display text-3xl font-bold text-gray-900 mb-4\">\n              Please Login\n            </h1>\n            <p className=\"text-gray-600 mb-8\">\n              You need to be logged in to view your wishlist.\n            </p>\n            <Link href=\"/\">\n              <Button size=\"lg\" className=\"bg-terracotta hover:bg-terracotta/90\">\n                Go to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-warm-cream flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-terracotta mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading wishlist...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warm-cream\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <Heart className=\"h-8 w-8 text-terracotta\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">My Wishlist</h1>\n            {wishlistItems.length > 0 && (\n              <Badge className=\"bg-terracotta text-white\">\n                {wishlistItems.length} items\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Link href=\"/products\">\n              <Button variant=\"outline\" className=\"border-gray-300 text-gray-700 hover:bg-gray-50\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Continue Shopping\n              </Button>\n            </Link>\n            {wishlistItems.length > 0 && (\n              <Button \n                variant=\"outline\" \n                onClick={clearWishlist}\n                className=\"border-red-300 text-red-600 hover:bg-red-50\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {wishlistItems.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Heart className=\"h-24 w-24 text-gray-300 mx-auto mb-6\" />\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Your wishlist is empty</h2>\n            <p className=\"text-gray-600 mb-8 max-w-md mx-auto\">\n              Start browsing our collection and add items to your wishlist to save them for later.\n            </p>\n            <Link href=\"/products\">\n              <Button className=\"bg-terracotta hover:bg-terracotta/90 text-white\">\n                <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                Start Shopping\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-6\">\n            {wishlistItems.map((item) => (\n              <Card key={item.id} className=\"overflow-hidden hover:shadow-lg transition-shadow duration-300\">\n                <div className=\"relative\">\n                  <img\n                    src={item.images?.[0] || '/placeholder-image.jpg'}\n                    alt={item.name}\n                    className=\"w-full h-32 sm:h-48 object-cover\"\n                  />\n                  <button\n                    onClick={() => toggleWishlist(item.id)}\n                    className=\"absolute top-2 right-2 w-8 h-8 bg-white/80 hover:bg-white text-red-500 rounded-full flex items-center justify-center transition-colors duration-200\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </button>\n                </div>\n                <CardContent className=\"p-3 sm:p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-2 text-sm sm:text-base\">{item.name}</h3>\n                  <p className=\"text-gray-600 text-xs sm:text-sm mb-3 line-clamp-2\">{item.description}</p>\n                  <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n                    <span className=\"text-lg sm:text-2xl font-bold text-terracotta\">\n                      ₹{parseFloat(item.price).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n                    <Link href={`/products/${item.id}`} className=\"flex-1\">\n                      <Button variant=\"outline\" className=\"w-full border-terracotta text-terracotta hover:bg-terracotta hover:text-white text-xs sm:text-sm\">\n                        View Details\n                      </Button>\n                    </Link>\n                    <Button\n                      onClick={() => addToCartFromWishlist(item)}\n                      disabled={isAddingToCart}\n                      className=\"flex-1 bg-terracotta hover:bg-terracotta/90 text-white text-xs sm:text-sm\"\n                    >\n                      <Plus className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                      Add to Cart\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6738},"client/src/types/index.ts":{"content":"export * from \"@shared/schema\";\n\nexport interface CartState {\n  items: CartItemWithProduct[];\n  total: number;\n  itemCount: number;\n  sessionId: string;\n}\n\nexport interface SearchFilters {\n  category?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  query?: string;\n}\n","size_bytes":272},"client/src/components/admin/admin-layout.tsx":{"content":"import { Package, ShoppingBag, Tags, Settings, BarChart3 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst navigation = [\n  { name: \"Products\", href: \"/admin\", icon: Package },\n  { name: \"Orders\", href: \"/admin/orders\", icon: ShoppingBag },\n  { name: \"Categories\", href: \"/admin/categories\", icon: Tags },\n  { name: \"Analytics\", href: \"/admin/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/admin/settings\", icon: Settings },\n];\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n  title: string;\n}\n\nexport function AdminLayout({ children, title }: AdminLayoutProps) {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-gray-900 text-white min-h-screen\">\n          <div className=\"p-6\">\n            <Link href=\"/\">\n              <h3 className=\"font-display text-xl font-semibold mb-6 text-terracotta\">\n                Hastkala Admin\n              </h3>\n            </Link>\n            <nav className=\"space-y-2\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href;\n                \n                return (\n                  <Link key={item.name} href={item.href}>\n                    <Button\n                      variant=\"ghost\"\n                      className={`w-full justify-start text-left ${\n                        isActive \n                          ? \"bg-terracotta text-white hover:bg-terracotta/90\" \n                          : \"text-gray-300 hover:bg-gray-800 hover:text-white\"\n                      }`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-2\" />\n                      {item.name}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          \n          <div className=\"absolute bottom-4 left-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"text-gray-400 hover:text-white\">\n                ← Back to Store\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"mb-6\">\n              <h1 className=\"font-display text-3xl font-bold text-gray-900\">{title}</h1>\n            </div>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                {children}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2780},"client/src/components/admin/admin-login.tsx":{"content":"\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Lock } from 'lucide-react';\n\ninterface AdminLoginProps {\n  onLogin: (username: string, password: string) => Promise<boolean>;\n}\n\nexport function AdminLogin({ onLogin }: AdminLoginProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    const success = await onLogin(username, password);\n    \n    if (!success) {\n      setError('Invalid credentials. Please try again.');\n    }\n    \n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-terracotta rounded-full flex items-center justify-center mb-4\">\n            <Lock className=\"h-6 w-6 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Login</CardTitle>\n          <p className=\"text-gray-600\">Please enter your admin credentials</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                placeholder=\"Enter admin username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                placeholder=\"Enter admin password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-terracotta hover:bg-terracotta/90\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Signing in...' : 'Sign In'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2933},"client/src/components/admin/category-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Upload, X, Image } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { createCategory, updateCategory, uploadCategoryImage, deleteImage } from \"@/lib/api\";\nimport type { Category, InsertCategory } from \"@shared/schema\";\n\nconst categoryFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  slug: z.string().min(1, \"Slug is required\").regex(/^[a-z0-9-]+$/, \"Slug can only contain lowercase letters, numbers, and hyphens\"),\n  description: z.string().nullable().optional(),\n  thumbnail: z.string().nullable().optional(),\n});\n\ntype CategoryFormData = z.infer<typeof categoryFormSchema>;\n\ninterface CategoryFormProps {\n  category?: Category;\n  onSuccess?: () => void;\n}\n\nexport function CategoryForm({ category, onSuccess }: CategoryFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [thumbnailFile, setThumbnailFile] = useState<File | null>(null);\n  const [thumbnailPreview, setThumbnailPreview] = useState<string | null>(category?.thumbnail || null);\n  const [isUploadingThumbnail, setIsUploadingThumbnail] = useState(false);\n\n  const form = useForm<CategoryFormData>({\n    resolver: zodResolver(categoryFormSchema),\n    defaultValues: {\n      name: category?.name || \"\",\n      slug: category?.slug || \"\",\n      description: category?.description || \"\",\n      thumbnail: category?.thumbnail || null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: createCategory,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<InsertCategory>) => updateCategory(category!.id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\", \n        description: \"Category updated successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: CategoryFormData) => {\n    try {\n      let finalData = { ...data };\n      \n      // Upload thumbnail if a new file is selected\n      if (thumbnailFile) {\n        setIsUploadingThumbnail(true);\n        try {\n          const result = await uploadCategoryImage(thumbnailFile);\n          finalData.thumbnail = result.imageUrl;\n        } catch (error) {\n          toast({\n            title: \"Error\",\n            description: \"Failed to upload thumbnail image\",\n            variant: \"destructive\",\n          });\n          return;\n        } finally {\n          setIsUploadingThumbnail(false);\n        }\n      }\n      \n      if (category) {\n        updateMutation.mutate(finalData);\n      } else {\n        createMutation.mutate(finalData);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An error occurred while saving the category\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle thumbnail upload\n  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast({\n          title: \"Error\",\n          description: \"Image size must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setThumbnailFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setThumbnailPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const removeThumbnail = async () => {\n    if (form.watch(\"thumbnail\")) {\n      try {\n        await deleteImage(form.watch(\"thumbnail\"));\n        toast({\n          title: \"Success\",\n          description: \"Image deleted successfully\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Warning\",\n          description: \"Failed to delete image file, but continuing\",\n          variant: \"destructive\",\n        });\n      }\n    }\n    setThumbnailFile(null);\n    setThumbnailPreview(null);\n    form.setValue(\"thumbnail\", null);\n  };\n\n  // Generate slug from name\n  const generateSlug = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.value;\n    form.setValue(\"name\", name);\n    if (!category) { // Only auto-generate slug for new categories\n      form.setValue(\"slug\", generateSlug(name));\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending || isUploadingThumbnail;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {category ? \"Edit Category\" : \"Add New Category\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"name\">Category Name</Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              onChange={handleNameChange}\n              placeholder=\"Enter category name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"slug\">URL Slug</Label>\n            <Input\n              id=\"slug\"\n              {...form.register(\"slug\")}\n              placeholder=\"category-url-slug\"\n            />\n            <p className=\"text-gray-500 text-sm mt-1\">\n              Used in URLs. Only lowercase letters, numbers, and hyphens allowed.\n            </p>\n            {form.formState.errors.slug && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.slug.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Enter category description (optional)\"\n              rows={3}\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label>Category Thumbnail</Label>\n            <div className=\"mt-2\">\n              {thumbnailPreview ? (\n                <div className=\"relative\">\n                  <div className=\"w-32 h-32 border-2 border-gray-300 rounded-lg overflow-hidden bg-gray-50\">\n                    <img\n                      src={thumbnailPreview}\n                      alt=\"Category thumbnail\"\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={removeThumbnail}\n                    className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"w-32 h-32 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center bg-gray-50 hover:bg-gray-100 transition-colors\">\n                  <Image className=\"h-8 w-8 text-gray-400 mb-2\" />\n                  <span className=\"text-sm text-gray-500\">No image</span>\n                </div>\n              )}\n              \n              <div className=\"mt-4\">\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleThumbnailChange}\n                  className=\"hidden\"\n                  id=\"thumbnail-upload\"\n                />\n                <Label\n                  htmlFor=\"thumbnail-upload\"\n                  className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  {thumbnailPreview ? \"Change Image\" : \"Upload Image\"}\n                </Label>\n                <p className=\"text-gray-500 text-sm mt-1\">\n                  Upload a thumbnail image for this category (max 5MB)\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"bg-terracotta hover:bg-terracotta/90\"\n            >\n              {isLoading ? \"Saving...\" : category ? \"Update Category\" : \"Create Category\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10045},"client/src/components/admin/product-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCategories, createProduct, updateProduct, deleteImage } from \"@/lib/api\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n\nconst productFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  categoryId: z.number().min(1, \"Category is required\"),\n  stock: z.number().min(0, \"Stock must be non-negative\"),\n  sku: z.string().min(1, \"SKU is required\"),\n  featured: z.boolean().default(false),\n  images: z.array(z.string()).default([]),\n  features: z.array(z.string()).default([]),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\ninterface ProductFormProps {\n  product?: Product;\n  onSuccess?: () => void;\n}\n\nexport function ProductForm({ product, onSuccess }: ProductFormProps) {\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: getCategories,\n  });\n\n  const { data: existingProducts = [] } = useQuery({\n    queryKey: [\"/api/products-with-category\"],\n    queryFn: async () => {\n      const response = await fetch('/api/products-with-category');\n      return response.json();\n    },\n  });\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: product?.name || \"\",\n      description: product?.description || \"\",\n      price: product?.price || \"\",\n      categoryId: product?.categoryId || 0,\n      stock: product?.stock || 0,\n      sku: product?.sku || \"\",\n      featured: product?.featured || false,\n      images: product?.images || [],\n      features: product?.features || [],\n    },\n  });\n\n  // Generate SKU based on category\n  const generateSKU = (categoryId: number) => {\n    const category = categories.find(c => c.id === categoryId);\n    if (!category) return \"\";\n\n    // Create category prefix from first 3-4 letters of category name\n    const prefix = category.name\n      .replace(/[^a-zA-Z]/g, '')\n      .substring(0, 4)\n      .toUpperCase();\n\n    // Find highest existing SKU number for this category\n    const categoryProducts = existingProducts.filter(p => p.categoryId === categoryId);\n    const existingNumbers = categoryProducts\n      .map(p => p.sku)\n      .filter(sku => sku.startsWith(prefix))\n      .map(sku => {\n        const match = sku.match(/(\\d+)$/);\n        return match ? parseInt(match[1]) : 0;\n      })\n      .filter(num => !isNaN(num));\n\n    const nextNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) + 1 : 1;\n    return `${prefix}${nextNumber.toString().padStart(3, '0')}`;\n  };\n\n  // Auto-generate SKU when category changes (only for new products)\n  useEffect(() => {\n    const categoryId = form.watch(\"categoryId\");\n    const currentSku = form.watch(\"sku\");\n    \n    // Only auto-generate for new products or if SKU is empty\n    if (!product && categoryId && categoryId > 0 && !currentSku) {\n      const newSku = generateSKU(categoryId);\n      if (newSku) {\n        form.setValue(\"sku\", newSku);\n      }\n    }\n  }, [form.watch(\"categoryId\"), categories, existingProducts]);\n\n  const createMutation = useMutation({\n    mutationFn: createProduct,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-with-category\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<InsertProduct>) => updateProduct(product!.id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-with-category\"] });\n      toast({\n        title: \"Success\", \n        description: \"Product updated successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    if (product) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const uploadImage = async (file: File) => {\n    const formData = new FormData();\n    formData.append('image', file);\n\n    const response = await fetch('/api/upload-image', {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to upload ${file.name}`);\n    }\n\n    const data = await response.json();\n    const currentImages = form.getValues(\"images\");\n    form.setValue(\"images\", [...currentImages, data.imageUrl]);\n    \n    return data;\n  };\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setUploading(true);\n    \n    try {\n      const uploadPromises = Array.from(files).map(file => uploadImage(file));\n      await Promise.all(uploadPromises);\n      \n      toast({\n        title: \"Success\",\n        description: `${files.length} image(s) uploaded successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Some images failed to upload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      // Clear the input\n      event.target.value = '';\n    }\n  };\n\n  const removeImage = async (index: number) => {\n    const currentImages = form.getValues(\"images\");\n    const imageToDelete = currentImages[index];\n    \n    try {\n      // Delete the image file from server\n      await deleteImage(imageToDelete);\n      \n      // Remove from form\n      form.setValue(\"images\", currentImages.filter((_, i) => i !== index));\n      \n      toast({\n        title: \"Success\",\n        description: \"Image deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete image\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {product ? \"Edit Product\" : \"Add New Product\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Product Name</Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                placeholder=\"Enter product name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"sku\">SKU</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"sku\"\n                  {...form.register(\"sku\")}\n                  placeholder=\"Enter SKU or select category to auto-generate\"\n                  className=\"flex-1\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    const categoryId = form.watch(\"categoryId\");\n                    if (categoryId && categoryId > 0) {\n                      const newSku = generateSKU(categoryId);\n                      if (newSku) {\n                        form.setValue(\"sku\", newSku);\n                        toast({\n                          title: \"SKU Generated\",\n                          description: `New SKU: ${newSku}`,\n                        });\n                      }\n                    } else {\n                      toast({\n                        title: \"Select Category\",\n                        description: \"Please select a category first\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  }}\n                  disabled={!form.watch(\"categoryId\") || form.watch(\"categoryId\") === 0}\n                >\n                  Generate\n                </Button>\n              </div>\n              {form.formState.errors.sku && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.sku.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Enter product description\"\n              rows={3}\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"price\">Price (₹)</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                {...form.register(\"price\")}\n                placeholder=\"0.00\"\n              />\n              {form.formState.errors.price && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.price.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"stock\">Stock Quantity</Label>\n              <Input\n                id=\"stock\"\n                type=\"number\"\n                {...form.register(\"stock\", { valueAsNumber: true })}\n                placeholder=\"0\"\n              />\n              {form.formState.errors.stock && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.stock.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select\n                value={form.watch(\"categoryId\")?.toString() || \"\"}\n                onValueChange={(value) => form.setValue(\"categoryId\", parseInt(value))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id.toString()}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.categoryId && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.categoryId.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"featured\"\n              checked={form.watch(\"featured\")}\n              onCheckedChange={(checked) => form.setValue(\"featured\", checked)}\n            />\n            <Label htmlFor=\"featured\">Featured Product</Label>\n          </div>\n\n          {/* Product Features */}\n          <div>\n            <Label>Product Features</Label>\n            <div className=\"space-y-4\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"new-feature\"\n                  placeholder=\"Enter a product feature\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      const input = e.target as HTMLInputElement;\n                      const value = input.value.trim();\n                      if (value) {\n                        const currentFeatures = form.getValues(\"features\");\n                        form.setValue(\"features\", [...currentFeatures, value]);\n                        input.value = '';\n                      }\n                    }\n                  }}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    const input = document.getElementById('new-feature') as HTMLInputElement;\n                    const value = input.value.trim();\n                    if (value) {\n                      const currentFeatures = form.getValues(\"features\");\n                      form.setValue(\"features\", [...currentFeatures, value]);\n                      input.value = '';\n                    }\n                  }}\n                >\n                  Add Feature\n                </Button>\n              </div>\n              \n              {form.watch(\"features\").length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Features ({form.watch(\"features\").length})\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {form.watch(\"features\").map((feature, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <span className=\"text-sm text-gray-700\">• {feature}</span>\n                        <Button\n                          type=\"button\"\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-red-600 hover:text-red-700 h-6 w-6 p-0\"\n                          onClick={() => {\n                            const currentFeatures = form.getValues(\"features\");\n                            form.setValue(\"features\", currentFeatures.filter((_, i) => i !== index));\n                          }}\n                        >\n                          ×\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              <p className=\"text-xs text-gray-500\">\n                Press Enter or click \"Add Feature\" to add a new feature\n              </p>\n            </div>\n          </div>\n\n          {/* Images */}\n          <div>\n            <Label>Product Images</Label>\n            <div className=\"space-y-6\">\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6\">\n                <div className=\"text-center\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <svg className=\"w-12 h-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                    </svg>\n                    <div className=\"text-sm text-gray-600\">\n                      <label htmlFor=\"image-upload\" className=\"cursor-pointer\">\n                        <span className=\"text-terracotta font-medium hover:text-terracotta/80\">Click to upload</span>\n                        <span> or drag and drop</span>\n                      </label>\n                      <Input\n                        id=\"image-upload\"\n                        type=\"file\"\n                        accept=\"image/jpeg,image/jpg,image/png,image/webp,image/gif\"\n                        onChange={handleFileSelect}\n                        className=\"hidden\"\n                        disabled={uploading}\n                        multiple\n                      />\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      PNG, JPG, WebP or GIF up to 10MB each\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {uploading && (\n                <div className=\"flex items-center justify-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-terracotta\"></div>\n                  <span className=\"ml-2 text-sm text-gray-600\">Uploading images...</span>\n                </div>\n              )}\n\n              {form.watch(\"images\").length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n                    Product Images ({form.watch(\"images\").length})\n                  </h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                    {form.watch(\"images\").map((url, index) => (\n                      <div key={index} className=\"relative group\">\n                        <div className=\"aspect-square overflow-hidden rounded-lg border-2 border-gray-200 bg-gray-50\">\n                          <img\n                            src={url}\n                            alt={`Product image ${index + 1}`}\n                            className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                          />\n                        </div>\n                        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded-lg\" />\n                        <Button\n                          type=\"button\"\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"absolute top-2 right-2 h-7 w-7 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={() => removeImage(index)}\n                          disabled={uploading}\n                        >\n                          ×\n                        </Button>\n                        <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-60 text-white text-xs px-2 py-1 rounded\">\n                          {index === 0 ? 'Main' : index + 1}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    The first image will be used as the main product image\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"bg-terracotta hover:bg-terracotta/90\"\n            >\n              {isLoading ? \"Saving...\" : product ? \"Update Product\" : \"Create Product\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":19605},"client/src/components/auth/auth-dialog.tsx":{"content":"\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { registerSchema, loginSchema, type RegisterData, type LoginData } from \"@shared/auth-schema\";\n\ninterface AuthDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: (user: any, sessionId: string) => void;\n}\n\nexport function AuthDialog({ open, onOpenChange, onSuccess }: AuthDialogProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const handleRegister = async (data: RegisterData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Registration failed\");\n      }\n\n      const result = await response.json();\n      toast({\n        title: \"Registration Successful\",\n        description: \"Welcome! You can now place orders.\",\n      });\n      \n      onSuccess(result.user, result.sessionId);\n      onOpenChange(false);\n      registerForm.reset();\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogin = async (data: LoginData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n\n      const result = await response.json();\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back!\",\n      });\n      \n      onSuccess(result.user, result.sessionId);\n      onOpenChange(false);\n      loginForm.reset();\n    } catch (error: any) {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-w-[95vw] p-4 sm:p-6\">\n        <DialogHeader className=\"pb-2\">\n          <DialogTitle className=\"text-lg sm:text-xl\">Authentication Required</DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 h-8 sm:h-10\">\n            <TabsTrigger value=\"login\" className=\"text-xs sm:text-sm\">Login</TabsTrigger>\n            <TabsTrigger value=\"register\" className=\"text-xs sm:text-sm\">Register</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\" className=\"mt-3\">\n            <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-3 sm:space-y-4\">\n              <div className=\"space-y-1\">\n                <Label htmlFor=\"login-email\" className=\"text-xs sm:text-sm\">Email</Label>\n                <Input\n                  id=\"login-email\"\n                  type=\"email\"\n                  {...loginForm.register(\"email\")}\n                  placeholder=\"Enter your email\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {loginForm.formState.errors.email && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {loginForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <Label htmlFor=\"login-password\" className=\"text-xs sm:text-sm\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  type=\"password\"\n                  {...loginForm.register(\"password\")}\n                  placeholder=\"Enter your password\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {loginForm.formState.errors.password && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {loginForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button type=\"submit\" className=\"w-full h-8 sm:h-10 text-sm\" disabled={isLoading}>\n                {isLoading ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </TabsContent>\n          \n          <TabsContent value=\"register\" className=\"mt-3\">\n            <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-3 sm:space-y-4\">\n              <div className=\"space-y-1\">\n                <Label htmlFor=\"register-name\" className=\"text-xs sm:text-sm\">Full Name</Label>\n                <Input\n                  id=\"register-name\"\n                  {...registerForm.register(\"name\")}\n                  placeholder=\"Enter your full name\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {registerForm.formState.errors.name && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {registerForm.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <Label htmlFor=\"register-email\" className=\"text-xs sm:text-sm\">Email</Label>\n                <Input\n                  id=\"register-email\"\n                  type=\"email\"\n                  {...registerForm.register(\"email\")}\n                  placeholder=\"Enter your email\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {registerForm.formState.errors.email && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {registerForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <Label htmlFor=\"register-password\" className=\"text-xs sm:text-sm\">Password</Label>\n                <Input\n                  id=\"register-password\"\n                  type=\"password\"\n                  {...registerForm.register(\"password\")}\n                  placeholder=\"Enter your password\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {registerForm.formState.errors.password && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {registerForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <Label htmlFor=\"register-confirm\" className=\"text-xs sm:text-sm\">Confirm Password</Label>\n                <Input\n                  id=\"register-confirm\"\n                  type=\"password\"\n                  {...registerForm.register(\"confirmPassword\")}\n                  placeholder=\"Confirm your password\"\n                  className=\"h-8 sm:h-10 text-sm\"\n                />\n                {registerForm.formState.errors.confirmPassword && (\n                  <p className=\"text-xs text-red-500 mt-0.5\">\n                    {registerForm.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button type=\"submit\" className=\"w-full h-8 sm:h-10 text-sm\" disabled={isLoading}>\n                {isLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8386},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Makhana E-commerce Platform\n\n## Overview\n\nMakhana is a full-stack e-commerce platform specializing in premium makhana (fox nuts) products. The application features a modern React frontend with a traditional Indian aesthetic, Express.js backend, and supports both file-based JSON storage and PostgreSQL database configurations. The platform includes comprehensive product management, shopping cart functionality, user authentication, order tracking, reviews, and an admin panel for content management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with pages for home, products, cart, wishlist, profile, admin, and order tracking\n- **State Management**: TanStack React Query for server state management and custom hooks for local state\n- **UI Components**: Shadcn/ui component library with Radix UI primitives and Tailwind CSS for styling\n- **Design System**: Custom Indian-themed color palette with CSS variables for terracotta, saffron, turmeric, and other traditional colors\n- **Authentication**: Session-based authentication with localStorage for session persistence\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API with structured route handlers in `/server/routes.ts`\n- **Database Layer**: Abstracted storage interface supporting both JSON file storage and PostgreSQL via Drizzle ORM\n- **File Storage**: Multer for handling image uploads with organized directory structure by date\n- **Session Management**: Custom session handling with bcrypt for password hashing\n- **Development**: Hot module replacement via Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for schema management and migrations\n- **Alternative Storage**: JSON file-based storage system in `/server/json-storage.ts` for development/testing\n- **Schema Definition**: Shared TypeScript schemas in `/shared/schema.ts` with Zod validation\n- **File Management**: Organized image storage with automatic directory creation by date\n- **Database Configuration**: Drizzle configuration supporting environment-based database URLs\n\n### Authentication and Authorization\n- **User Authentication**: Custom session-based system with email/password registration and login\n- **Admin Authentication**: Separate admin authentication system with role-based access control\n- **Session Storage**: Browser localStorage for session persistence across page reloads\n- **Password Security**: Bcrypt hashing for secure password storage\n- **Authorization Headers**: Bearer token system for API authentication\n\n### Core Features Architecture\n- **Product Management**: Full CRUD operations with category association, image galleries, stock management, and featured product system\n- **Shopping Cart**: Session-based cart persistence with automatic session ID generation\n- **Order Processing**: Complete order lifecycle with tracking numbers, status updates, and customer information\n- **Review System**: User reviews with ratings, moderation capabilities, and aggregated statistics\n- **Search and Filtering**: Product search by name, category filtering, and price-based sorting\n- **Wishlist**: User-specific wishlist functionality for authenticated users\n\n## External Dependencies\n\n### Core Runtime Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL client for database connectivity\n- **drizzle-orm**: Modern TypeSQL ORM with PostgreSQL dialect support\n- **bcrypt**: Password hashing and verification for authentication security\n- **multer**: Multipart form data handling for file uploads\n- **express**: Web application framework for the backend API\n- **vite**: Fast build tool and development server with HMR support\n\n### Frontend UI and State Management\n- **@tanstack/react-query**: Powerful data synchronization for React applications\n- **@radix-ui/**: Comprehensive collection of unstyled, accessible UI primitives\n- **react-hook-form**: Performant forms library with minimal re-renders\n- **@hookform/resolvers**: Validation resolvers for React Hook Form\n- **wouter**: Minimalist routing library for React applications\n- **tailwindcss**: Utility-first CSS framework for styling\n\n### Development and Build Tools\n- **typescript**: Static type checking for JavaScript\n- **tsx**: TypeScript execution environment for Node.js\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Replit-specific development tooling\n\n### Validation and Utilities\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx**: Utility for constructing className strings conditionally\n- **date-fns**: Modern JavaScript date utility library\n\n### Image and Media Handling\n- **Internal file management**: Organized directory structure for product and category images\n- **Upload validation**: File type and size restrictions for image uploads\n- **Image optimization**: Structured storage with WebP support for modern browsers","size_bytes":5453}},"version":1}